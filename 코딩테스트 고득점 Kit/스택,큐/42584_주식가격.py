# 42584_주식가격.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 초 단위로 기록된 주식 가격이 주어집니다.
# - 각 시점에서, 가격이 **떨어지지 않은 기간(초 단위)**을 계산하는 문제입니다.

# ✅ 입력 형식:
# - prices: 주식 가격 리스트 (길이 1 이상 100,000 이하, 원소는 1 이상 10,000 이하)

# ✅ 출력 형식:
# - 각 시점에서 가격이 떨어지지 않은 기간을 담은 정수 리스트

# ✅ 입출력 예제:
# 예제 1:
#   입력: [1, 2, 3, 2, 3]
#   출력: [4, 3, 1, 1, 0]

# -----------------------------------------------------

def solution(prices):
    n = len(prices)
    answer = [0] * n  # 각 인덱스별 가격이 유지된 시간 저장
    stack = []  # 인덱스를 저장하여, 가격 비교 시점 추적

    for i in range(n):
        # 현재 가격이 이전보다 낮으면, 스택에서 꺼내며 정답 계산
        while stack and prices[i] < prices[stack[-1]]:
            j = stack.pop()
            answer[j] = i - j
        stack.append(i)

    # 끝까지 떨어지지 않은 가격들 처리
    while stack:
        j = stack.pop()
        answer[j] = n - 1 - j

    return answer

# -----------------------------------------------------
# ✅ 나의 오답 및 실수:
# ❌ 1단계에서 완전탐색(O(N^2)) 외에 다른 방식이 떠오르지 않음
# ❌ 2단계에서 스택을 사용해 인덱스를 저장하고 처리하는 구조 이해가 어려웠음
# ❌ 가격이 끝까지 떨어지지 않았을 때 처리하는 부분 구현에 어려움

# ✅ GPT가 준 힌트 요약:
# - **스택에 인덱스를 저장하고**, 가격이 떨어지면 꺼내어 시간 계산
# - **prices[i] < prices[stack[-1]]** 조건으로 하락 감지
# - 마지막까지 떨어지지 않은 인덱스는 **n - 1 - idx**로 처리

# ✅ 사용된 개념 요약:
# - 스택 자료구조: 이전 가격 비교 대기 상태 저장
# - 인덱스 기반 계산: 시간 차이를 정확하게 측정하기 위함
# - 반복문과 조건문을 이용한 효율적인 순회 (O(N))

# -----------------------------------------------------
