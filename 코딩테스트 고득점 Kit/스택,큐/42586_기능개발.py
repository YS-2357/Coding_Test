# 42586_기능개발.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 각 기능은 진도가 100%가 되어야 배포할 수 있으며, 앞선 기능이 완성되지 않으면 뒤의 기능도 배포 불가.
# - 각 기능의 현재 진도(progresses)와 개발 속도(speeds)가 주어짐.
# - 하루에 speeds[i]%씩 개발되며, 각 기능이 언제 배포되는지를 계산.
# - 배포는 하루에 한 번만 가능하며, 여러 기능을 함께 배포할 수 있음.

# ✅ 입력 형식:
# - progresses: 각 기능의 현재 진도 리스트 (1 ≤ len ≤ 100)
# - speeds: 각 기능의 개발 속도 리스트 (각각 1 ≤ speed ≤ 100)

# ✅ 출력 형식:
# - 배포마다 몇 개의 기능이 포함되었는지를 순서대로 리스트로 반환

# ✅ 입출력 예제:
# 예제 입력: progresses = [93, 30, 55], speeds = [1, 30, 5]
# 예제 출력: [2, 1]
# -----------------------------------------------------

from math import ceil
from collections import deque

def solution(progresses, speeds):
    answer = []  # 최종 결과를 저장할 리스트
    days = []    # 각 기능이 완료되기까지의 소요일 수

    # ✅ 각 기능마다 완료까지 걸리는 일수를 계산
    for progress, speed in zip(progresses, speeds):
        day = ceil((100 - progress) / speed)
        days.append(day)  # 예: [7, 3, 9] → [7, 3, 9]

    # ✅ deque로 변환하여 앞에서부터 처리
    queue = deque(days)

    while queue:
        current = queue.popleft()  # 기준이 되는 첫 번째 작업의 완료 일수
        count = 1  # 현재 기준 작업을 포함하여 배포 가능한 기능 수

        # ✅ queue의 앞에서부터 검사하여 같이 배포 가능한 기능을 센다
        while queue and queue[0] <= current:
            queue.popleft()
            count += 1

        answer.append(count)  # 해당 배포에 포함된 기능 개수를 결과에 추가

    return answer  # 예: [2, 1] ← 7일 후 2개, 9일 후 1개 배포됨

# -----------------------------------------------------
# ✅ 오답 및 실수 정리:
# ❌ 초기 코드에서는 days 리스트까지만 작성하고, 배포 단위로 묶지 못함.
# ❌ 조건에 따라 여러 기능을 함께 배포해야 하는데, 이를 비교할 로직이 없었음.

# ✅ 사용된 힌트 목록:
# - 각 기능 완료 일수 계산에 math.ceil 사용
# - deque를 사용하여 앞에서부터 순차 처리
# - 기준 날짜보다 작거나 같은 기능은 함께 배포 가능한 점을 이용

# ✅ 개선 포인트:
# - queue 구조를 사용하여 효율적으로 선입선출 처리 가능
# - 반복문 내부에서 popleft로 처리하여 코드 간결화
# -----------------------------------------------------
