# 49190_방의_개수.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 방향이 담긴 arrows 배열이 주어지며, 각각의 값은 0부터 7까지의 8방향을 의미한다.
# - 각 방향은 다음과 같이 정의된다:
#     0: ↑, 1: ↗, 2: →, 3: ↘, 4: ↓, 5: ↙, 6: ←, 7: ↖
# - 화살표 방향대로 이동하며, 이동한 경로로 방(폐곡선)이 생길 경우 그 개수를 구하는 문제이다.
# - 이동 중 교차점이 생기는 경우에도 방이 새로 생긴 것으로 간주된다.
#
# ✅ 입력 형식:
# - arrows: 방향을 나타내는 정수 배열 (0 <= arrows[i] <= 7, 1 <= arrows 길이 <= 1,000)
#
# ✅ 출력 형식:
# - 생성된 방의 개수 (int)
#
# ✅ 입출력 예시:
# ▶ 입력: [6, 6, 6, 4, 4, 4, 2, 2, 2, 0, 0, 0]
# ▶ 출력: 1
# -----------------------------------------------------

def solution(arrows):
    # 각 방향에 따른 x, y 이동 좌표 설정 (8방향)
    dx = [0, 1, 1, 1, 0, -1, -1, -1]  # x 좌표 변화
    dy = [1, 1, 0, -1, -1, -1, 0, 1]  # y 좌표 변화

    x, y = 0, 0  # 시작 좌표
    visited_nodes = set([(x, y)])  # 방문한 정점 저장 (좌표 기준)
    visited_edges = set()          # 방문한 간선 저장 (양방향으로 저장)
    room = 0                       # 생성된 방의 개수

    for arrow in arrows:
        for _ in range(2):  # 중간 경로 생성을 위한 이중 반복 (대각선 처리 정확도를 위해)
            nx = x + dx[arrow]  # 다음 x 위치 계산
            ny = y + dy[arrow]  # 다음 y 위치 계산

            edge = ((x, y), (nx, ny))             # 현재 → 다음 위치 간선
            reverse_edge = ((nx, ny), (x, y))     # 다음 → 현재 위치 간선 (양방향 체크용)

            # 이미 방문한 적 없는 간선이지만, 도착점은 방문한 정점이라면 → 새로운 방 형성
            if (edge not in visited_edges) and ((nx, ny) in visited_nodes):
                room += 1  # 방 1개 증가

            # 현재 간선과 역간선을 모두 방문 처리
            visited_edges.add(edge)
            visited_edges.add(reverse_edge)

            # 다음 위치를 정점 방문 처리
            visited_nodes.add((nx, ny))

            # 위치 업데이트
            x, y = nx, ny

    return room

# -----------------------------------------------------
# ✅ 내가 했던 오답 및 실수:
# 1. 대각선 경로에서 교차가 생기는 경우를 간과하여 방이 생기지 않는 것으로 처리했음.
#    → 해결: 각 방향에 대해 0.5칸씩 두 번 이동하도록 하여 대각선 교차도 올바르게 처리.
#
# 2. 간선(경로) 중복 처리를 하지 않아, 중복된 방이 중복 계산되는 경우 발생.
#    → 해결: 양방향 간선(edge, reverse_edge)을 모두 visited_edges에 저장함으로써 중복 제거.
#
# 3. set의 활용이 익숙하지 않아 visited_nodes 및 visited_edges의 의미를 놓침.
#    → 해결: 각 좌표와 간선을 튜플로 저장하여 중복 방문을 효과적으로 방지함.
#
# ✅ 힌트 목록:
# - 모든 간선을 양방향으로 저장하여 교차 상황 처리
# - 대각선 이동 시 중간 노드 누락 방지를 위한 이중 이동 처리
# - set을 활용한 정점/간선 방문 체크
# -----------------------------------------------------
