# 42839_소수찾기.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 주어진 숫자 문자열을 이용해 만들 수 있는 모든 숫자 조합 중,
#   소수인 수가 몇 개인지 찾는 문제입니다.

# ✅ 입력 형식:
# - numbers: 문자열 (길이 1 이상 7 이하, 각 문자: '0'~'9')

# ✅ 출력 형식:
# - 만들 수 있는 소수의 개수 (중복 제외)

# ✅ 입출력 예제:
# 예제 1:
#   입력: "17"
#   출력: 3  # 가능한 수: 1, 7, 17, 71 → 소수: 7, 17, 71
# 예제 2:
#   입력: "011"
#   출력: 2  # 가능한 수: 0, 1, 10, 11, 101, 110 → 소수: 11, 101

# -----------------------------------------------------

from itertools import permutations

def solution(numbers):
    answer = 0
    perms = set()  # 모든 조합 숫자를 저장 (중복 제거 목적)
    
    # 모든 길이의 순열을 생성하여 정수로 변환
    for i in range(1, len(numbers) + 1):
        for p in permutations(numbers, i):
            num = int(''.join(p))
            perms.add(num)
    
    # 소수 판별 함수
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True
    
    # 소수 개수 세기
    for perm in perms:
        if is_prime(perm):
            answer += 1
            
    return answer

# -----------------------------------------------------
# ✅ 나의 오답 및 실수:
# ❌ 없음

# ✅ GPT가 준 힌트 요약:
# - `itertools.permutations()`를 이용해 모든 조합 생성
# - `set`을 이용해 중복 제거
# - 소수 판별 함수에서 `n < 2` 조건 필수

# ✅ 사용된 개념 요약:
# - 순열 (permutations): 문자열로부터 가능한 모든 숫자 조합 생성
# - 집합 (set): 중복 수 제거
# - 소수 판별 (is_prime): √n까지 나눠보며 확인

# ✅ 결과:
# ✅ 한번에 정답을 맞춤
# -----------------------------------------------------
