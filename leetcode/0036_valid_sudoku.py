# 0036_valid_sudoku.py
# -----------------------------------------------------
# ✅ 제목: Valid Sudoku
# ✅ 문제 설명(요약):
# - 9x9 스도쿠 보드가 규칙을 위배하지 않는지 검사한다.
# - 규칙: 각 행/열/3x3 박스에 숫자 '1'~'9'가 중복 없이 등장해야 한다. '.'는 빈 칸.
#
# ✅ 입력 형식(요지):
# - board: List[List[str]] (각 칸은 '1'~'9' 또는 '.')
#
# ✅ 규칙 요약:
# 1) 행 r에서 같은 숫자 중복 금지
# 2) 열 c에서 같은 숫자 중복 금지
# 3) 박스 (r//3, c//3)에서 같은 숫자 중복 금지
#
# ✅ 입출력 예시(1개):
# - 유효한 보드면 True, 위배가 있으면 False
#
# ✅ 정답 코드(너의 풀이; 한 줄마다 주석):
class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        seen = set()                                      # (행,숫자), (열,숫자,'col'), ((박스행,박스열),숫자)

        for r in range(9):
            for c in range(9):
                d = board[r][c]
                if d == ".":                              # 빈 칸은 패스
                    continue
                box = (r // 3, c // 3)                    # 3x3 박스 좌표
                # 이미 같은 숫자를 본 적이 있다면 위배
                if ((r, d) in seen) or ((c, d, 'col') in seen) or ((box, d) in seen):
                    return False
                # 처음 보는 위치들이면 기록
                seen.add((r, d))                          # 행 중복 체크용
                seen.add((c, d, 'col'))                   # 열 중복 체크용
                seen.add((box, d))                        # 박스 중복 체크용
        return True                                       # 끝까지 위배가 없으면 유효

# -----------------------------------------------------
# 🔍 첫 시도 결과:
# - 행/열/박스를 각각 세트로 들고 가려다 행 세트를 행마다 초기화하지 않아 중복 오판 가능.
#
# 🔧 오답 및 실수(무엇을 틀렸고 어떻게 고쳤는지):
# - (이전) seen_row를 한 번만 만들고 행 루프마다 초기화 누락, 열/박스도 별도 관리 부재.
#   → (수정) 단일 set에 합성 키((r,d), (c,d,'col'), ((r//3,c//3),d))를 저장해 1패스로 일관되게 검증.
#
# 📚 사용된/필수 개념(최소):
# - 해시셋 기반 중복 탐지
# - 3x3 박스 인덱싱: (r//3, c//3)
# - 시간복잡도: O(81)=O(1), 공간복잡도: O(81)=O(1)
