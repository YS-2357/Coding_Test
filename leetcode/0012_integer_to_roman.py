# 0012_integer_to_roman.py
# -----------------------------------------------------
# ✅ 제목: Integer to Roman
# ✅ 문제 설명(요약):
# - 정수 num(1 ≤ num ≤ 3999)을 로마 숫자 문자열로 변환한다.
# - 로마 숫자 기호: I(1), V(5), X(10), L(50), C(100), D(500), M(1000)
# - 감산 표기(4,9,40,90,400,900)를 반드시 포함해야 한다.
#
# ✅ 입력 형식(요지):
# - num: int (1 ≤ num ≤ 3999)
#
# ✅ 규칙 요약:
# 1) 큰 값 기호부터 차례대로 사용해 num을 줄인다(그리디).
# 2) 감산 표기 6개: 4=IV, 9=IX, 40=XL, 90=XC, 400=CD, 900=CM
# 3) 동일 기호는 최대 3번 연속 사용(표 규칙상 자동 보장).
#
# ✅ 입출력 예시(1개):
# - num = 1994 → "MCMXCIV"   (1000 + 900 + 90 + 4)
#
# ✅ 정답 코드(너의 풀이; 한 줄마다 주석):
class Solution:
    def intToRoman(self, num: int) -> str:
        pairs = [                                # (값, 기호) 쌍을 내림차순으로 준비
            (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),
            (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),
            (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I'),
        ]
        roman = []                                # 결과를 모을 리스트(문자열 덧셈보다 효율적)

        for value, symbol in pairs:               # 큰 값부터 순회
            if num == 0:                          # 조기 종료(남은 값이 없으면 끝)
                break
            q, num = divmod(num, value)           # 현재 단위를 몇 번 쓰는지(q), 나머지(num) 갱신
            if q:                                 # q>0이면 해당 기호를 q번 붙인다
                roman.append(symbol * q)          # 예: 300 → 'C'*3 → 'CCC'

        return "".join(roman)                     # 리스트를 합쳐 최종 문자열 반환

# -----------------------------------------------------
# 🔍 첫 시도 결과:
# - 딕셔너리를 사용하며 40을 'LX'로 잘못 표기하고(정답: 'XL'), 쉼표 누락 등의 문법 오류가 있었음.
#
# 🔧 오답 및 실수(무엇을 틀렸고 어떻게 고쳤는지):
# - (이전) dict 사용으로 순서가 보장되지 않을 수 있음 + 감산 표기 오기.
#   → (수정) 순서가 중요한 리스트(튜플)로 내림차순 테이블 구성.
#   → 40='XL' 등 감산 표기 6개 정확히 포함.
#   → divmod로 몫/나머지를 한 번에 계산해 깔끔하게 차감.
#
# 📚 사용된/필수 개념(최소):
# - 그리디: 큰 단위부터 최대한 사용해 구성
# - 감산 표기(IV, IX, XL, XC, CD, CM) 포함
# - 문자열 빌드 최적화(리스트에 append 후 join)
# - 시간복잡도: O(1) (테이블 길이 고정), 공간복잡도: O(1)
