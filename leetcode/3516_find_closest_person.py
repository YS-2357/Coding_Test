# 3516_find_closest_person.py
# -----------------------------------------------------
# ✅ 제목: Find Closest Person
# ✅ 문제 설명(요약):
# - 수직선 위에 세 사람 A, B, C가 있다.
# - A는 위치 x, B는 위치 y, C는 위치 z에서 시작한다.
# - A와 B는 같은 속도로 C의 위치 z로 이동한다.
# - 누가 먼저 C에게 도착하는지 판별:
#   → 1 (A가 먼저), 2 (B가 먼저), 0 (동시에 도착).
#
# ✅ 입력 형식(요지):
# - x, y, z: int (세 사람의 초기 위치)
#
# ✅ 규칙 요약:
# 1) dist_x = |x - z|, dist_y = |y - z|
# 2) dist_x < dist_y → A가 더 가까움 → 반환 1
# 3) dist_x > dist_y → B가 더 가까움 → 반환 2
# 4) 같으면 동시에 도착 → 반환 0
#
# ✅ 입출력 예시(1개):
# - x=2, y=5, z=4
#   dist_x=2, dist_y=1 → B가 더 가까움 → 정답=2
#
# ✅ 정답 코드(너의 풀이; 한 줄마다 주석):
class Solution:
    def findClosest(self, x: int, y: int, z: int) -> int:
        dist_x = abs(x - z)                  # A와 C 사이 거리
        dist_y = abs(z - y)                  # B와 C 사이 거리
        if dist_x > dist_y:                  # B가 더 가까움
            return 2
        elif dist_x < dist_y:                # A가 더 가까움
            return 1
        else:                                # 두 거리 동일 → 동시에 도착
            return 0

# -----------------------------------------------------
# 🔍 첫 시도 결과:
# - 정답 일치, 정상 작동.
#
# 🔧 오답 및 실수(무엇을 틀렸고 어떻게 고쳤는지):
# - 없음. 단, 변수 이름에서 dist_y 계산 시 `abs(z - y)`와 `abs(y - z)`는 동일이므로 혼동 주의.
#
# 📚 사용된/필수 개념(최소):
# - 절댓값을 통한 거리 계산
# - 단순 조건 분기
# - 시간복잡도 O(1), 공간복잡도 O(1)
