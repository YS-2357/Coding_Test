# 3302_gcd_of_odd_and_even_sums.py
# -----------------------------------------------------
# ✅ 제목: GCD of Odd and Even Sums
# ✅ 문제 설명(요약):
# - 1부터 2n까지의 정수를 모두 더할 때,
#   홀수들의 합과 짝수들의 합을 구한 뒤 그 최대공약수를 반환한다.
#
# ✅ 입력 형식(요지):
# - n: int (양의 정수)
#
# ✅ 규칙 요약:
# 1) 1 ~ 2n 범위에서 홀수 합(odd), 짝수 합(even)을 각각 계산.
# 2) 두 수의 최대공약수(GCD)를 반환.
#
# ✅ 입출력 예시(1개):
# - n = 7 → 1~14까지
#   odd = 1+3+...+13 = 49, even = 2+4+...+14 = 56
#   gcd(49, 56) = 7 → 정답 7
#
# ✅ 정답 코드(너의 풀이; 한 줄마다 주석):
class Solution:
    def gcdOfOddEvenSums(self, n: int) -> int:
        odd, even = 0, 0
        for i in range(1, 2*n+1):       # 1부터 2n까지 반복
            if i % 2 == 0:              # 짝수면
                even += i               # 짝수 합에 더하기
            else:                       # 홀수면
                odd += i                # 홀수 합에 더하기
        if odd < even:                  # 항상 odd ≥ even으로 맞추기
            odd, even = even, odd
            
        while even:                     # 유클리드 호제법으로 gcd 구하기
            odd, even = even, odd % even
        
        return odd                      # 최대공약수 반환

# -----------------------------------------------------
# 🔍 첫 시도 결과:
# - 정상 동작 및 정답 도출.
#
# 🔧 오답 및 실수(무엇을 틀렸고 어떻게 고쳤는지):
# - (없음) 다만 gcd 계산은 math.gcd를 쓰면 더 간단해짐.
#
# 📚 사용된/필수 개념(최소):
# - 홀수/짝수 합의 성질 (등차수열 합)
# - 최대공약수: 유클리드 호제법
# - 시간복잡도: O(n) (합 계산 루프), 공간복잡도: O(1)

# -----------------------------------------------------
# 다른 풀이
# 짝수 합: n*n
# 홀수 합: (n+1)*n
# 최대공약수는 n이 된다
# class Solution:
#     def gcdOfOddEvenSums(self, n: int) -> int:
#         return n
