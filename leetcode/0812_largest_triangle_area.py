# 0812_largest_triangle_area.py
# -----------------------------------------------------
# ‚úÖ Ï†úÎ™©: Largest Triangle Area
# ‚úÖ Î¨∏Ï†ú ÏÑ§Î™Ö(ÏöîÏïΩ):
# - ÌèâÎ©¥ ÏúÑ Ï†êÎì§Ïùò ÏßëÌï©Ïù¥ Ï£ºÏñ¥ÏßÑÎã§.
# - ÏÑ∏ Ï†êÏùÑ ÏÑ†ÌÉùÌï¥ ÎßåÎì§ Ïàò ÏûàÎäî ÏÇºÍ∞ÅÌòï Ï§ë ÏµúÎåÄ Î©¥Ï†ÅÏùÑ Íµ¨ÌïòÎùº.
# - Î©¥Ï†ÅÏùÄ Ïã§Ïàò(float)Î°ú Î∞òÌôòÌïúÎã§.
#
# ‚úÖ ÏûÖÎ†• ÌòïÏãù(ÏöîÏßÄ):
# - points: List[List[int]], Í∞Å ÏõêÏÜåÎäî [x, y] Ï¢åÌëú
#
# ‚úÖ Í∑úÏπô ÏöîÏïΩ:
# 1) ÏÑ∏ Ï†ê (a, b, c)ÏùÑ ÏÑ†ÌÉùÌï¥ ÏÇºÍ∞ÅÌòï Î©¥Ï†Å Í≥µÏãù Ï†ÅÏö©:
#    area = |x_a(y_b - y_c) + x_b(y_c - y_a) + x_c(y_a - y_b)| / 2
# 2) Î™®Îì† Ï°∞Ìï© Ï§ë ÏµúÎåÄÍ∞íÏùÑ Í∞±Ïã†
# 3) n ‚â§ 50 Ïù¥ÎØÄÎ°ú O(n¬≥) ÏôÑÏ†ÑÌÉêÏÉâ Í∞ÄÎä•
#
# ‚úÖ ÏûÖÏ∂úÎ†• ÏòàÏãú(1Í∞ú):
# - points = [[0,0],[0,1],[1,0],[0,2],[2,0]]
#   ‚Üí ÏµúÎåÄ Î©¥Ï†ÅÏùÄ 2.0
#
# ‚úÖ Ï†ïÎãµ ÏΩîÎìú(ÎÇòÏùò ÌíÄÏù¥; Ìïú Ï§ÑÎßàÎã§ Ï£ºÏÑù):
class Solution:
    def largestTriangleArea(self, points: List[List[int]]) -> float:
        answer = 0
        for i in range(len(points)):                       # Ï≤´ Î≤àÏß∏ Ï†ê ÏÑ†ÌÉù
            a1, a2 = points[i]
            for j in range(i+1, len(points)):              # Îëê Î≤àÏß∏ Ï†ê ÏÑ†ÌÉù
                b1, b2 = points[j]
                for k in range(j+1, len(points)):          # ÏÑ∏ Î≤àÏß∏ Ï†ê ÏÑ†ÌÉù
                    c1, c2 = points[k]
                    # Ïô∏Ï†Å Í∏∞Î∞ò Í≥µÏãùÏúºÎ°ú Î©¥Ï†Å Í≥ÑÏÇ∞
                    area = abs(a1*(b2-c2) + b1*(c2-a2) + c1*(a2-b2)) / 2
                    # ÏµúÎåÄÍ∞í Í∞±Ïã†
                    answer = max(answer, area)
        return answer                                      # ÏµúÎåÄ Î©¥Ï†Å Î∞òÌôò

# -----------------------------------------------------
# üîç Ï≤´ ÏãúÎèÑ Í≤∞Í≥º:
# - Í≥µÏãù Î∞è ÏôÑÏ†ÑÌÉêÏÉâ Íµ¨ÌòÑÏúºÎ°ú Ï†ïÎãµ Î∞òÌôò.
#
# üîß Ïò§Îãµ Î∞è Ïã§Ïàò(Î¨¥ÏóáÏùÑ ÌãÄÎ†∏Í≥† Ïñ¥ÎñªÍ≤å Í≥†Ï≥§ÎäîÏßÄ):
# - Ï°∞Í±¥Î¨∏ÏúºÎ°ú `area > answer` ÎπÑÍµê ÌõÑ ÎåÄÏûÖ ÎåÄÏã† `max()` ÏÇ¨Ïö©Ìï¥ Í∞ÄÎèÖÏÑ± Í∞úÏÑ†.
# - ÎÇòÎ®∏ÏßÄ Î°úÏßÅÏùÄ Ïò¨Î∞îÎ•¥Í≤å ÎèôÏûë.
#
# üìö ÏÇ¨Ïö©Îêú/ÌïÑÏàò Í∞úÎÖê(ÏµúÏÜå):
# - ÏÇºÍ∞ÅÌòï Î©¥Ï†Å Í≥µÏãù (Ïô∏Ï†Å/ÏäàÎ†àÏù¥Ïä§ Í≥µÏãù)
# - ÏÇºÏ§ë Î£®ÌîÑ ÏôÑÏ†ÑÌÉêÏÉâ
# - ÏãúÍ∞ÑÎ≥µÏû°ÎèÑ: O(n¬≥), n ‚â§ 50Ïù¥Îùº Ï∂©Î∂ÑÌûà Í∞ÄÎä•

# -----------------------------------------------------
# Îã§Î•∏ ÌíÄÏù¥
# from typing import List

# class Solution:
#     def largestTriangleArea(self, points: List[List[int]]) -> float:
#         # ---------- 1) Î≥ºÎ°ùÍªçÏßà: Andrew monotonic chain ----------
#         pts = sorted(set(map(tuple, points)))
#         if len(pts) < 3:
#             return 0.0

#         def cross(o, a, b):
#             return (a[0]-o[0])*(b[1]-o[1]) - (a[1]-o[1])*(b[0]-o[0])

#         # collinear Î≥¥Ï°¥: '< 0'Îßå ÌåùÌïòÏó¨ Í≤ΩÍ≥Ñ Í∑πÏ†ê ÏÜêÏã§ Î∞©ÏßÄ
#         lower = []
#         for p in pts:
#             while len(lower) >= 2 and cross(lower[-2], lower[-1], p) < 0:
#                 lower.pop()
#             lower.append(p)

#         upper = []
#         for p in reversed(pts):
#             while len(upper) >= 2 and cross(upper[-2], upper[-1], p) < 0:
#                 upper.pop()
#             upper.append(p)

#         hull = lower[:-1] + upper[:-1]   # CCW, ÎßàÏßÄÎßâ Ï§ëÎ≥µ Ï†úÍ±∞
#         h = len(hull)
#         if h < 3:
#             return 0.0

#         # ---------- 2) ÌöåÏ†Ñ Ï∫òÎ¶¨ÌçºÏä§: O(h^2) ----------
#         def area2(a, b, c):
#             return abs(cross(a, b, c))  # Îëê Î∞∞ Î©¥Ï†Å

#         best2 = 0  # Îëê Î∞∞ Î©¥Ï†ÅÏùò ÏµúÎåÄÍ∞í
#         for i in range(h):
#             k = i + 2  # Í∞Å iÎßàÎã§ k Ï¥àÍ∏∞Ìôî
#             # jÎ•º ÏõêÌòïÏúºÎ°ú i+1 .. i+h-1 ÍπåÏßÄ ÏàúÌöå(ÏÇºÍ∞ÅÌòïÏùÄ i<j<k ÏõêÌòï Ïù∏Îç±Ïã±ÏúºÎ°ú ÌëúÌòÑ)
#             for j in range(i + 1, i + h - 1):
#                 j2 = j % h
#                 # kÎäî ÏµúÏÜå j+1 Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï®
#                 if k < j + 1:
#                     k = j + 1
#                 # Î©¥Ï†ÅÏù¥ Ï¶ùÍ∞Ä/ÎèôÏùº(ÌèâÌÉÑ)ÌïòÎäî ÎèôÏïà k Ï†ÑÏßÑ
#                 while k + 1 < i + h and \
#                       area2(hull[i], hull[j2], hull[(k + 1) % h]) >= area2(hull[i], hull[j2], hull[k % h]):
#                     k += 1
#                 best2 = max(best2, area2(hull[i], hull[j2], hull[k % h]))

#         return best2 / 2.0
