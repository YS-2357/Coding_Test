# 백준 11727번: 2×N 타일링 2 (다이나믹 프로그래밍 - Bottom-Up 방식)
# 문제 설명:
# 2×N 크기의 직사각형을 1×2, 2×1, 2×2 타일로 채우는 방법의 수를 구하는 문제.
# - 경우의 수가 커질 수 있으므로 10,007로 나눈 나머지를 출력해야 한다.

# 입력 형식:
# - 첫 번째 줄에 정수 N (1 ≤ N ≤ 1,000)이 주어진다.

# 출력 형식:
# - 2×N 크기의 직사각형을 타일로 채우는 방법의 수를 10,007로 나눈 나머지를 출력한다.

# 예제 입력 1:
# 2
# 예제 출력 1:
# 3  (||, =, ⏏)

import sys  # ✅ 빠른 입력 처리를 위한 sys 모듈 사용

# ✅ 입력 처리
N = int(sys.stdin.readline().strip())  # ✅ 정수 N 입력 받기 (1 ≤ N ≤ 1,000)

# ✅ DP 테이블 초기화 (0부터 N까지)
dp = [0] * (N + 1)  # ✅ dp[i] = 2×i 크기의 직사각형을 타일로 채우는 방법의 수

# ✅ 기본값 설정 (점화식 기반)
dp[1] = 1  # ✅ 2×1 크기의 직사각형은 1×2 타일 하나만 사용 가능
if N > 1:
    dp[2] = 3  # ✅ 2×2 크기의 직사각형은 ||, =, ⏏ 총 3가지 방법

# ✅ DP 테이블 채우기 (Bottom-Up 방식)
for i in range(3, N + 1):
    dp[i] = (dp[i - 1] + 2 * dp[i - 2]) % 10007  # ✅ 점화식: dp[i] = dp[i-1] + 2 * dp[i-2] (나머지 연산 포함)

# ✅ 결과 출력
print(dp[N])  # ✅ N을 2×N 타일링할 수 있는 방법의 개수 출력


# -----------------------------------------------------
# ✅ 정답 코드이므로 오류 없음
# ✅ 바로 3단계 진행

# 📌 DP 점화식 설명:
# - dp[i-1] 뒤에 1×2 타일을 추가하는 경우
# - dp[i-2] 뒤에 2×2 타일을 추가하는 경우 (또는 1×2 두 개 추가하는 경우)

# ✅ 위 수정 후 실행하면 백준에서 정답 판정! 🚀 
