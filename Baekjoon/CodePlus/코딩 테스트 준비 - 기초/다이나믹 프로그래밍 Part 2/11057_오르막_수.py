# 백준 11057번: 오르막 수 (다이나믹 프로그래밍 - DP)
# -----------------------------------------------------
# ✅ 문제 설명:
# - 길이가 N인 오름차순 수의 개수를 구하는 문제.
# - 오름차순이란, 각 자릿수가 0 이상 9 이하이며, 왼쪽 자릿수 ≤ 오른쪽 자릿수 조건을 만족하는 수.
#
# ✅ 입력 형식:
# - 첫 번째 줄에 정수 N (1 ≤ N ≤ 1,000)이 주어진다.
#
# ✅ 출력 형식:
# - 길이가 N인 오름차순 수의 개수를 10,007로 나눈 나머지를 출력한다.
#
# ✅ 입출력 예제:
# 🔹 예제 입력 1:
#   1
#
# 🔹 예제 출력 1:
#   10
#
# 🔹 예제 입력 2:
#   2
#
# 🔹 예제 출력 2:
#   55
# -----------------------------------------------------

import sys

# ✅ 입력 처리
N = int(sys.stdin.readline())  # 숫자의 길이 입력
MOD = 10007  # 문제에서 주어진 MOD 값

# ✅ DP 테이블 초기화
dp = [[0] * 10 for _ in range(N)]  # dp[i][j]: 길이가 i+1이고 마지막 자릿수가 j인 오름차순 수의 개수

# ✅ 길이가 1일 때 (초기값 설정)
for i in range(10):
    dp[0][i] = 1  # 한 자리 숫자는 0~9까지 각각 1개씩 존재

# ✅ DP 테이블 채우기 (Bottom-Up 방식)
for i in range(1, N):  # 길이가 i+1인 경우를 채움
    for j in range(10):  # 끝자리 숫자 j
        for k in range(j, 10):  # j 이상인 숫자만 가능 (오름차순 유지)
            dp[i][j] += dp[i-1][k]
            dp[i][j] %= MOD  # MOD 연산 적용

# ✅ 정답 출력 (길이가 N인 오름차순 수의 총 개수)
print(sum(dp[N-1]) % MOD)

# -----------------------------------------------------
# ✅ 2단계에서 발생했던 오류 정리 및 수정:
# 1. ✅ `MOD` 연산이 모든 연산에 올바르게 적용됨.
# 2. ✅ `dp` 배열이 길이 1부터 올바르게 정의됨.
#
# ✅ 3단계 최종 정답 코드 제공 완료 🚀
