# 백준 1932번: 정수 삼각형 (다이나믹 프로그래밍 - Bottom-Up 방식)
# -----------------------------------------------------
# ✅ 문제 설명:
# - 정수 삼각형에서 맨 위부터 시작하여 아래로 내려가면서 선택한 수의 합을 최대로 만드는 경로를 찾는 문제.
# - 이동 가능 경로: 현재 위치에서 아래 또는 아래 오른쪽으로만 이동 가능.
#
# ✅ 입력 형식:
# - 첫 번째 줄에 삼각형의 크기 N (1 ≤ N ≤ 500)이 주어진다.
# - 이후 N개의 줄에 삼각형이 주어진다.
#
# ✅ 출력 형식:
# - 선택 가능한 최대 합을 출력한다.
#
# ✅ 입출력 예제:
# 🔹 예제 입력 1:
#   5
#   7
#   3 8
#   8 1 0
#   2 7 4 4
#   4 5 2 6 5
# 🔹 예제 출력 1:
#   30
# -----------------------------------------------------

import sys

# ✅ 빠른 입력 처리
N = int(sys.stdin.readline())
triangle = [list(map(int, sys.stdin.readline().split())) for _ in range(N)]

# ✅ DP 테이블 초기화
dp = [[0] * (i + 1) for i in range(N)]

# ✅ 초기값 설정 (삼각형의 맨 위)
dp[0][0] = triangle[0][0]

# ✅ DP 테이블 채우기 (Bottom-Up 방식)
if N > 1:
    for i in range(1, N):
        dp[i][0] = dp[i-1][0] + triangle[i][0]  # 삼각형 왼쪽 끝
        dp[i][i] = dp[i-1][i-1] + triangle[i][i]  # 삼각형 오른쪽 끝
        for j in range(1, i):
            dp[i][j] = max(dp[i-1][j] + triangle[i][j], dp[i-1][j-1] + triangle[i][j])  # 중간 값

# ✅ 결과 출력 (최대 합 찾기)
print(max(dp[N-1]))

# -----------------------------------------------------
# ✅ 2단계에서 발생했던 오류 정리 및 수정:
# 1. ✅ `dp` 크기 오류 수정 → `N+1`이 아닌 `N` 크기로 설정
# 2. ✅ `triangle` 접근 오류 수정 → `i-1`이 아니라 `i`로 접근
# 3. ✅ `dp[N+1]` 인덱스 오류 수정 → `dp[N-1]`로 변경
#
# ✅ 3단계 최종 정답 코드 제공 완료 🚀
