# 2290_LCD_Test.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 주어진 숫자를 LCD 디스플레이 형태로 출력하는 문제.
# - 숫자의 크기를 `s`로 조정할 수 있으며, `s+2` 너비, `2s+3` 높이로 출력됨.
# - 각 숫자는 7개의 세그먼트(`-` 또는 `|`)로 구성되며, 숫자에 따라 활성화되는 세그먼트가 다름.
# - 여러 개의 숫자를 한 줄에 나열하여 출력해야 하며, 숫자 사이에는 공백이 한 칸 포함됨.
#
# ✅ 입력 형식:
# - `s` (1 ≤ s ≤ 10): LCD 숫자의 크기
# - `n` (0 ≤ n ≤ 9,999,999,999): 출력할 숫자
#
# ✅ 출력 형식:
# - `s` 크기에 맞는 LCD 형태의 숫자를 출력
# - 숫자 사이에는 **1칸의 공백**이 있어야 함
#
# ✅ 입출력 예제:
# 🔹 입력:
#   2 123
# 🔹 출력:
# ```
#       --   --  
#    |    |    |
#    |    |    |
#       --   --  
#    | |       |   
#    | |       |   
#       --   --  
# ```
# -----------------------------------------------------

import sys

# ✅ 입력 처리
s, n = map(int, sys.stdin.readline().split())  # LCD 크기 `s`와 숫자 `n`을 입력받음
nums = list(map(int, str(n)))  # 숫자 `n`을 개별 숫자로 분해하여 리스트 `nums`에 저장

# ✅ 숫자별 활성화된 세그먼트를 정의
segments = {
    0: [1, 2, 3, 5, 6, 7],
    1: [3, 6],
    2: [1, 3, 4, 5, 7],
    3: [1, 3, 4, 6, 7],
    4: [2, 3, 4, 6],
    5: [1, 2, 4, 6, 7],
    6: [1, 2, 4, 5, 6, 7],
    7: [1, 3, 6],
    8: [1, 2, 3, 4, 5, 6, 7],
    9: [1, 2, 3, 4, 6, 7]
}

# ✅ LCD 숫자의 높이만큼 반복하여 출력
for row in range(2 * s + 3):  # 전체 높이(2s+3)만큼 반복
    line = []  # 현재 행에 출력할 문자열 리스트

    for num in nums:  # 각 숫자에 대해 반복
        active_segments = segments[num]  # 현재 숫자의 활성 세그먼트 정보 가져오기

        if row == 0:  # ✅ 윗부분 (1번 세그먼트)
            # `1`번 세그먼트가 활성화되어 있으면 "-" 출력, 아니면 공백 출력
            line.append(" " + ("-" * s if 1 in active_segments else " " * s) + " ")

        elif 1 <= row <= s:  # ✅ 윗쪽 세로 (2번, 3번 세그먼트)
            # `2`번 세그먼트가 활성화되면 왼쪽 "|", `3`번 세그먼트가 활성화되면 오른쪽 "|"
            left = "|" if 2 in active_segments else " "
            right = "|" if 3 in active_segments else " "
            line.append(left + " " * s + right)

        elif row == s + 1:  # ✅ 중간부분 (4번 세그먼트)
            # `4`번 세그먼트가 활성화되어 있으면 "-" 출력, 아니면 공백 출력
            line.append(" " + ("-" * s if 4 in active_segments else " " * s) + " ")

        elif s + 2 <= row <= 2 * s + 1:  # ✅ 아랫쪽 세로 (5번, 6번 세그먼트)
            # `5`번 세그먼트가 활성화되면 왼쪽 "|", `6`번 세그먼트가 활성화되면 오른쪽 "|"
            left = "|" if 5 in active_segments else " "
            right = "|" if 6 in active_segments else " "
            line.append(left + " " * s + right)

        elif row == 2 * s + 2:  # ✅ 아랫부분 (7번 세그먼트)
            # `7`번 세그먼트가 활성화되어 있으면 "-" 출력, 아니면 공백 출력
            line.append(" " + ("-" * s if 7 in active_segments else " " * s) + " ")

    print(" ".join(line))  # ✅ 숫자 간 공백을 유지하면서 한 줄씩 출력

# -----------------------------------------------------
# ✅ 2단계에서 발생한 오류 정리 및 수정:
# 1️⃣ **출력 형식 오류 (숫자 간 공백)**
#    - 숫자 간 간격이 맞지 않아 LCD 출력이 어긋나는 문제가 발생했음.
#    - 해결: `print(" ".join(line))`에서 `" "`을 사용하여 **정확한 공백 유지**.
#
# 2️⃣ **LCD 형태에서 숫자 줄 정렬 문제**
#    - 일부 숫자의 세그먼트 위치가 어긋남.
#    - 해결: `"-" * s`가 없는 경우 `" " * s`로 공백을 정확히 출력하도록 변경.
#
# 3️⃣ **숫자 한 줄씩 출력 방식 오류**
#    - 초기에는 숫자를 개별적으로 출력하여 한 줄씩 나열되지 않음.
#    - 해결: `line.append()`를 사용하여 한 줄을 리스트에 저장한 후, `join()`을 이용해 **한 번에 출력**.
#
# 4️⃣ **세그먼트 켜짐 상태에 따른 출력 문제**
#    - 숫자 1처럼 일부 숫자는 특정 위치에 `-`가 없어야 하지만, 잘못 출력됨.
#    - 해결: `if` 조건을 명확하게 하여 **세그먼트가 비활성화된 경우 올바르게 공백 처리**.
#
# ✅ 최종 코드에서 반영한 점:
# - **숫자 간격 유지 (`" ".join(line)`)**
# - **각 줄을 리스트에 저장 후 한 번에 출력하여 정렬 유지**
# - **LCD 세그먼트의 공백 및 `-`, `|` 위치 정밀 조정**
# - **기존 코드를 수정하지 않고, 주석을 통해 동작 원리를 명확하게 설명**
# -----------------------------------------------------
