# -------------------------------------------------------------
# ✅ 백준 16931번 - 겉넓이 구하기
#
# ▒ 문제 설명 ▒
# N x M 크기의 평면에 블록들이 쌓여 있고,
# 각 칸의 값은 해당 위치의 블록 높이를 나타낸다.
# 이때 모든 블록의 겉넓이(표면적)를 구하는 문제.
#
# 겉넓이는 위, 아래, 동서남북 방향에서 볼 수 있는 모든 면의 넓이를 합한 값.
#
# ▒ 입력 형식 ▒
# 첫 줄: N M (1 ≤ N, M ≤ 100)
# 다음 N줄: 각 줄에 M개의 정수 (0 ≤ 각 높이 ≤ 100)
#
# ▒ 출력 형식 ▒
# 블록들의 총 겉넓이를 출력한다.
#
# ▒ 예제 입력 ▒
# 3 3
# 3 3 3
# 3 3 3
# 3 3 3
#
# ▒ 예제 출력 ▒
# 54
# -------------------------------------------------------------

import sys

input = sys.stdin.readline

# ✅ 입력 받기
N, M = map(int, input().split())  # 행, 열
board = [list(map(int, input().split())) for _ in range(N)]  # 블록 높이 정보

# ✅ 겉넓이 계산을 위한 초기값 (위 + 아래 면)
surface_area = 2 * N * M  # 모든 칸의 위, 아래는 무조건 존재

# ✅ 각 칸에 대해 4방향(동서남북) 확인
for i in range(N):
    for j in range(M):
        h = board[i][j]  # 현재 위치의 블록 높이

        # 상하좌우 방향 (위, 아래, 왼, 오)
        for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:
            ni = i + dx
            nj = j + dy

            # 범위 밖인 경우: 바깥은 높이 0이라 가정
            if 0 <= ni < N and 0 <= nj < M:
                neighbor_height = board[ni][nj]
            else:
                neighbor_height = 0

            # 현재 면이 인접 블록보다 높은 만큼만 겉면이 드러남
            surface_area += max(h - neighbor_height, 0)

# ✅ 최종 출력
print(surface_area)

# -------------------------------------------------------------
# ✅ 백준 제출용 최종 정답 코드 🚀
# - 위/아래 면적: 2 * N * M 으로 시작
# - 모든 칸에서 4방향을 검사하여 상대적으로 높을 때만 면적 추가
# - 범위 밖은 높이 0으로 간주 (벽 없는 바깥 공간)
#
# ✅ 2단계에서 틀렸던 점 요약:
# - 방향 탐색 시 `elif`로 조건을 나눠서 모든 방향을 다 체크하지 않음
# - `i == N-1`, `j == M-1` 같은 조건으로 분기하여 한 방향만 처리되던 경우 존재
# - 위쪽, 왼쪽 방향을 누락해서 일부 면이 빠졌던 문제 발생
#
# ✅ 핵심 아이디어:
# - 블록은 주변보다 높은 만큼만 면적을 가진다 (max(현재 - 이웃, 0))
# - 이웃이 없으면 그쪽은 전부 노출되므로 그대로 면적 추가
# -------------------------------------------------------------
