# 백준 1037번: 약수
# 문제 설명:
# 어떤 자연수 N의 약수들이 주어졌을 때, 원래의 자연수를 구하는 프로그램을 작성한다.
# 약수 리스트에서 가장 작은 값과 가장 큰 값을 곱하면 원래의 자연수를 구할 수 있다.

# 입력 형식:
# 첫 번째 줄에 약수의 개수 n이 주어진다. (1 ≤ n ≤ 50)
# 두 번째 줄에 n개의 약수가 공백으로 구분되어 주어진다. (1 ≤ 약수 ≤ 1,000,000)

# 출력 형식:
# 주어진 약수들로부터 원래의 자연수를 출력한다.

# 예제 입력 1:
# 2
# 4 2
# 예제 출력 1:
# 8

# 예제 입력 2:
# 1
# 2
# 예제 출력 2:
# 4

# 예제 입력 3:
# 6
# 3 4 2 12 6 8
# 예제 출력 3:
# 24

# 🛑 [❌ 사용자가 작성한 코드] (틀린 코드)
"""
n = int(input())  # 약수의 개수 입력
divisors = list(map(int, input().split()))  # 약수 리스트 입력

original_number = min(divisors) * max(divisors)  # 최소 약수 × 최대 약수
print(original_number)  # 원래의 자연수 출력
"""

# ❌ 문제점:
# 1. 예외 처리 없음 → 입력이 잘못되거나 빈 리스트가 들어오면 오류 발생 가능
# 2. 약수가 정렬되어 있다는 보장 없음 → 리스트가 정렬되지 않은 경우 `min()`과 `max()`가 올바르게 동작하는지 명확히 검토 필요
# 3. 리스트가 비어있을 경우 `min(divisors)`, `max(divisors)`가 실행될 수 없어 오류 발생 가능


# ✅ [✔ 모범 답안: 최적화된 코드]
# - 파이썬 내장 함수 사용: min(), max(), map(), input(), print()
# - 리스트가 비어있을 경우 예외 처리 추가
# - 변수명을 명확하게 지정하여 코드 가독성 향상
# - 시간 복잡도: O(N) (최소, 최대 값 찾기)

# 입력 처리
n = int(input())  # 약수 개수 입력
divisors = list(map(int, input().split()))  # 약수 리스트 입력

# 예외 처리: 입력이 비어있거나 오류가 발생하는 경우 대비
if not divisors:  
    print(0)  # 빈 리스트가 들어온 경우 0 출력 후 종료
else:
    # 최소 약수와 최대 약수를 곱하여 원래의 자연수를 구함
    original_number = min(divisors) * max(divisors)
    print(original_number)  # 결과 출력
