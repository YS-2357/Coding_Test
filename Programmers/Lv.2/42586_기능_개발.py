# 42586_기능_개발.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 각 기능의 현재 진행률(progresses)과 개발 속도(speeds)가 주어짐.
# - 매일 speed만큼 progress가 증가하여 100% 이상이 되면 배포 준비 완료.
# - 기능은 순서대로 배포하며, 앞선 기능이 배포되는 날에 뒤따른 기능들도 완료되었으면 함께 배포.
# - 각 배포마다 몇 개의 기능이 배포되는지 리스트로 반환.

# ✅ 입력:
# - progresses: 현재 진행률 리스트 (0 ≤ value < 100)
# - speeds: 일일 개발 속도 리스트 (1 ≤ value ≤ 100)
#   두 리스트는 같은 길이이며, 길이 1~100

# ✅ 출력:
# - 배포마다 배포된 기능의 개수를 순서대로 담은 리스트

# ✅ 예시:
#   progresses = [93, 30, 55]
#   speeds     = [1, 30, 5]
#   → 남은 일수 [7, 3, 9]
#   → 첫 배포(7일째): 기능 1,2 → 2개
#   → 두 번째 배포(9일째): 기능 3 → 1개
#   출력: [2, 1]
# -----------------------------------------------------

def solution(progresses, speeds):
    answer = []         # 배포 묶음별 기능 개수 리스트
    days = []           # 각 기능의 남은 작업 일수 계산

    # ✅ 남은 일수 올림 계산: (100 - p + s - 1) // s
    for p, s in zip(progresses, speeds):
        days.append((100 - p + s - 1) // s)

    # ✅ 첫 기능의 완료일을 기준일(release_day)로 설정
    release_day = days[0]
    count = 1

    # ✅ 이후 기능들을 순차적으로 확인하며 그룹화
    for d in days[1:]:
        if d <= release_day:
            count += 1       # 기준일 내에 완료된 기능은 함께 배포
        else:
            answer.append(count)  # 이전 그룹 확정
            release_day = d       # 새로운 기준일 갱신
            count = 1             # 그룹 카운트 초기화

    answer.append(count)  # 마지막 그룹 카운트 추가
    return answer

# -----------------------------------------------------
# ✅ 나의 오답 및 실수:
# ❌ (100 - p) // s 로 내림 계산하여 남은 일수가 0이 될 수 있어 오차 발생
# ❌ 배포 그룹화 시 인접 기능만 비교해 새로운 기준일 설정이 누락됨

# ✅ GPT가 준 힌트 요약:
# - 남은 일수는 `(100 - p + s - 1) // s`로 올림 계산해야 정확함
# - 첫 기능의 완료일을 기준일로 두고,
#   이후 기능들의 남은 일수가 기준일 이하면 같이 배포, 초과하면 새 그룹 시작

# ✅ 사용된 개념 요약:
# - 수학적 올림 계산을 위한 정수 연산
# - zip을 이용한 리스트 동시 순회
# - 순차적 그룹화를 위한 기준일 비교

# ✅ 시간 복잡도:
# - O(n): progresses와 speeds 길이 n ≤ 100
# - 충분히 빠름
# -----------------------------------------------------
