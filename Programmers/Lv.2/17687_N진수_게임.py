# 17687_N진수_게임.py
# -----------------------------------------------------
# ✅ 제목: N진수 게임
# ✅ 문제 설명(요약):
# - 0,1,2,3,...을 n진수 문자열로 변환하여 한 줄로 이어붙인다.
# - 총 m명이 순서대로 한 글자씩 말할 때, p번째 사람이 말해야 하는 글자를 t개 모아 반환한다.
#
# ✅ 입력 형식(요지):
# - n: int (진법, 2~16)
# - t: int (내가 말해야 할 글자 수)
# - m: int (참가자 수)
# - p: int (내 차례; 1-based)
#
# ✅ 규칙 요약:
# 1) 숫자를 n진수로 변환(10~15는 'A'~'F').
# 2) 이어붙인 전체 문자열에서 전역 인덱스 idx에 대해 idx % m == p-1 인 글자만 수집.
# 3) 글자를 t개 모으면 즉시 종료.
#
# ✅ 정답 코드(너의 풀이; 한 줄마다 주석):
def solution(n, t, m, p):   
    def to_base(num, n):
        digits = "0123456789ABCDEF"     # 0~15에 대응하는 문자 테이블
        if num == 0:                    # 0은 예외적으로 "0"
            return "0"
        res = ""                        # 변환 결과 누적 버퍼
        while num > 0:                  # 나눗셈/나머지로 진법 변환
            num, r = divmod(num, n)     # 몫과 나머지
            res = digits[r] + res       # 나머지를 앞쪽에 붙여 역순 보정
        return res                      # n진수 문자열 반환
    
    answer = ''                         # 내가 말할 글자들을 모을 결과
    idx = 0                             # 전역 글자 인덱스(0부터 시작, 사람 배정에 사용)
    num = 0                             # 현재 변환할 10진수 숫자
    
    while len(answer) < t:              # t개 모을 때까지 반복
        s = to_base(num, n)             # 현재 숫자를 n진수 문자열로 변환
        for ch in s:                    # 문자열의 각 글자를 순서대로 처리(글자 단위가 핵심)
            if idx % m == p - 1:        # 내 차례라면(1-based p → p-1과 비교)
                answer += ch            # 해당 글자를 결과에 추가
                if len(answer) == t:    # t개 다 모았으면 즉시 종료
                    break
            idx += 1                    # 전역 글자 인덱스 한 칸 전진
        num += 1                        # 다음 숫자로 진행
        
    return answer                       # 최종 결과 반환

# -----------------------------------------------------
# 🔍 첫 시도 결과:
# - 예시 테스트:
#   * n=2, t=4, m=2, p=1 → "0111"
#   * n=16, t=16, m=2, p=1 → "02468ACE11111111"
#   * n=16, t=16, m=2, p=2 → "13579BDF01234567"
# - 숫자 단위가 아닌 “글자 단위”로 순번을 나눠 해결 완료.
#
# 🔧 오답 및 실수(무엇을 틀렸고 어떻게 고쳤는지):
# - (이전) i번째 “숫자” 전체를 내 차례일 때 붙여서 길이가 과하게 늘어남.
#   → (수정) 전역 글자 인덱스 idx를 두고, 숫자를 n진수로 바꾼 뒤 각 “글자”를 순번 배분.
# - (주의) p는 1-based → 비교 시 p-1 사용.
#
# 📚 사용된/필수 개념(최소):
# - 진법 변환: 나눗셈/나머지 + 자리 역순
# - 순환 인덱싱: idx % m로 사람 배정
# - 조기 종료로 불필요 계산 방지
# - 시간복잡도: O(t·m) 정도의 글자 생성/검사
#
# 🧠 (선택) 다른 효율적인 풀이 또는 알고리즘 제안:
# - 숫자열을 미리 t·m 글자 이상까지 버퍼링 후 인덱싱으로 뽑기(메모리 여유 시 간단).
# - 2·8·16 진법은 내장 bin/oct/hex로 빠르게 만들고 접두사 제거 + 대문자화로 처리 가능.
