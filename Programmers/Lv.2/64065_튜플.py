# 64065_튜플.py
# -----------------------------------------------------
# ✅ 제목: 튜플
# ✅ 문제 설명(요약):
# - 문자열 s에는 여러 개의 집합이 중괄호 형태로 나열되어 있다.
#   예: "{{2},{2,1},{2,1,3},{2,1,3,4}}"
# - 집합들이 원소 개수 1 → 2 → 3 → … 순으로 커지며, 매번 새로운 원소가 1개씩 추가된다.
# - 이 성질을 이용해 튜플을 복원한다.
#   예: → [2, 1, 3, 4]
#
# ✅ 입력 형식(요지):
# - s: str, 중첩 집합들을 표현한 문자열
#
# ✅ 규칙 요약:
# 1) 문자열을 파싱하여 집합 리스트로 변환.
# 2) 집합들을 원소 개수 오름차순으로 정렬.
# 3) 순서대로 순회하며 "처음 등장하는 원소"만 뽑아 튜플에 추가.
#
# ✅ 정답 코드(너의 풀이; 한 줄마다 주석):
def solution(s):
    answer = []                 # 최종 튜플 순서를 담을 리스트
    s = s[2:-2]                 # 맨 앞 "{{"와 맨 뒤 "}}" 제거
    s = s.split("},{")          # 집합 단위로 분리 (예: ["2", "2,1", "2,1,3", ...])
    s = [t.split(",") for t in s]  # 각 집합을 원소 문자열 리스트로 변환
    s.sort(key=lambda x: len(x)) # 원소 개수 기준으로 오름차순 정렬
    seen = set()                # 이미 추가한 원소를 추적하기 위한 집합
    
    for lst in s:               # 정렬된 집합 리스트를 순회
        for num in lst:         # 집합의 각 원소 확인
            num = int(num)      # 문자열을 정수로 변환
            if num not in seen: # 처음 보는 원소라면
                seen.add(num)   # 집합에 기록
                answer.append(num)  # 결과 리스트에 추가
    
    return answer               # 튜플 복원 결과 반환

# -----------------------------------------------------
# 🔍 첫 시도 결과:
# - 정답과 일치. 문자열 파싱 → 정렬 → 새 원소 탐색 과정을 정확히 구현.
#
# 🔧 오답 및 실수(무엇을 틀렸고 어떻게 고쳤는지):
# - 큰 실수 없음. 다만 문자열 파싱 부분이 다소 길다.
#   * 정규식 re.findall(r"\d+", s) 같은 방법을 쓰면 더 간결할 수 있음.
#
# 📚 사용된/필수 개념(최소):
# - 문자열 파싱 및 리스트 변환
# - 집합(Set)을 통한 중복 검출
# - 정렬 기준 지정(key=len)으로 집합 크기 순 정렬
# - 시간복잡도: O(n log n) (집합 정렬), n은 전체 원소 개수
# - 공간복잡도: O(n) (파싱된 리스트와 seen)
#
# 🧠 (선택) 다른 효율적인 풀이 또는 알고리즘 제안:
# - **빈도수 기반 풀이**: 모든 숫자의 등장 횟수를 세면,
#   튜플의 앞 원소일수록 더 많이 등장한다는 성질을 이용해,
#   빈도 내림차순 정렬로 곧장 튜플 순서를 구할 수 있다.
