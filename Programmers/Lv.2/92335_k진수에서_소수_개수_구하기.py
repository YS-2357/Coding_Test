# 92335_k진수에서_소수_개수_구하기.py
# -----------------------------------------------------
# ✅ 제목: k진수에서 소수 개수 구하기
# ✅ 문제 설명(요약):
# - 정수 n을 k진수로 변환한다.
# - 변환된 문자열을 '0'을 기준으로 분리한다.
# - 각 조각을 정수로 해석했을 때, 소수이면 카운트한다.
# - 단, 1과 빈 문자열은 제외한다.
#
# ✅ 입력 형식(요지):
# - n: int (1 ≤ n ≤ 1,000,000)
# - k: int (2 ≤ k ≤ 10)
#
# ✅ 규칙 요약:
# 1) k진수 변환: divmod로 몫·나머지를 구해 앞에 붙여나간다.
# 2) '0'으로 split한 뒤, ""와 "1"은 제외한다.
# 3) 나머지를 int로 바꿔 소수 판정.
# 4) 소수 개수를 반환.
#
# ✅ 정답 코드(너의 풀이; 한 줄마다 주석):
def solution(n, k):
    answer = 0
    
    # 1) n을 k진수 문자열로 변환
    k_num = ''
    while n > 0:                              # n이 0이 될 때까지 나눗셈 반복
        n, r = divmod(n, k)                   # 몫과 나머지
        k_num = str(r) + k_num                # 나머지를 앞에 붙여 역순 보정
    
    # 2) 소수 판별 함수
    def is_prime(number):
        if number < 2:                        # 0과 1은 소수가 아님
            return False
        for i in range(2, int(number ** 0.5) + 1):  # 2부터 √number까지 나눠보기
            if number % i == 0:               # 나눠 떨어지면 합성수
                return False
        return True                           # 위 조건에 안 걸리면 소수
    
    # 3) '0' 기준으로 분리
    parts = k_num.split('0')
    
    # 4) 각 조각 검사
    for part in parts:
        if part == '' or part == '1':         # 빈 문자열/1은 무시
            continue
        if is_prime(int(part)):               # 정수로 변환 후 소수 판정
            answer += 1                       # 소수면 카운트
    
    return answer                             # 소수 개수 반환

# -----------------------------------------------------
# 🔍 첫 시도 결과:
# - 예시 입력(n=437674, k=3) → 3개, 문제의 기대값과 일치.
# - 다른 예시도 정상 동작.
#
# 🔧 오답 및 실수(무엇을 틀렸고 어떻게 고쳤는지):
# - 초기에는 소수 판정에서 number < 2를 고려하지 않아 1이 소수로 처리될 수 있었음.
#   → 조건 추가하여 보완.
# - split 후 빈 문자열("")도 나와서 무조건 int 변환하면 에러 가능.
#   → "" 필터링 추가.
#
# 📚 사용된/필수 개념(최소):
# - 진법 변환(divmod, 앞쪽 누적)
# - 문자열 split과 필터링
# - 소수 판정(√n까지 확인)
# - 시간복잡도: O(log_k n + Σ√p) (p=분리된 수)
# - 공간복잡도: O(log_k n) (k진수 문자열 저장)
#
# 🧠 (선택) 다른 효율적인 풀이 또는 알고리즘 제안:
# - 소수 판정은 에라토스테네스의 체로 미리 소수를 만들어두고 membership 체크하면 반복 시 효율적.
# - 단, 조각이 매우 클 수 있어 √p 탐색은 불가피 → Miller-Rabin 같은 확률적 소수 판별로 최적화 가능.
