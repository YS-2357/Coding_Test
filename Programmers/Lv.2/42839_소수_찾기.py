# 42839_소수_찾기.py
# -----------------------------------------------------
# ✅ 제목: 소수 찾기
# ✅ 문제 설명(요약):
# - 문자열 numbers의 각 자리 숫자를 일부 또는 전부 사용해 만들 수 있는 모든 자연수를 생성.
# - 그중 소수의 개수를 반환.

# ✅ 입력 형식(요지):
# - numbers: 숫자 문자열(길이 n, 보통 n ≤ 7)

# ✅ 규칙 요약:
# 1) 자리 재배열로 길이 1..n의 모든 수를 고려.
# 2) 중복 수는 1회만 카운트.
# 3) 0과 1은 소수 아님.

# ✅ 정답 코드(나의 풀이; 절대 수정 금지)
def solution(numbers):   
    def is_prime(n):                          # 소수 판별 함수
        if n < 2:                             # 2 미만은 소수 아님
            return False
        for i in range(2, int(n**0.5) + 1):   # √n까지 나눠떨어지는지 검사
            if n % i == 0:
                return False
        return True
    
    cnt = [0] * 10                            # 각 숫자(0~9)의 개수 기록용 배열
    for ch in numbers:                        # 입력 문자열에서 숫자 빈도 계산
        cnt[int(ch)] += 1
        
    made = set()                              # 생성된 숫자를 저장할 집합(중복 제거)

    def dfs(cur):                             # 현재까지 만든 수 cur에서 확장하는 DFS
        for d in range(10):                   # 0~9까지 숫자 시도
            if cnt[d] == 0:                   # 사용 가능한 개수가 없으면 건너뜀
                continue
            cnt[d] -= 1                       # 숫자 d 하나 사용
            nxt = cur * 10 + d                # 새로운 수 생성
            made.add(nxt)                     # 만든 수를 집합에 추가
            dfs(nxt)                          # 다음 자리에 대해 재귀 호출
            cnt[d] += 1                       # 사용한 숫자 복원(백트래킹)

    dfs(0)                                    # 초기 cur=0에서 DFS 시작

    return sum(1 for x in made if is_prime(x))# 집합의 수들 중 소수 개수 합산 후 반환

# -----------------------------------------------------
# 🔍 첫 시도 결과:
# - 숫자 빈도(cnt) 기반 DFS로 모든 길이의 수를 생성.
# - made(set)로 중복 제거, is_prime으로 최종 판정.

# 🔧 오답 이유 및 실수:
# - 논리적 오류 없음. 다만 가지치기 부재로 탐색량이 커질 수 있음.
# - cur=0에서 시작해 0 자체도 set에 들어가지만 is_prime이 걸러줌(문제 없음).

# 📚 사용한 알고리즘 개념:
# - 멀티셋(빈도표) DFS 백트래킹
# - 집합으로 중복 제거
# - √n 범위 소수 판정
# - 복잡도: 최악 분기 폭 큼(중복 적을수록 증가), 실전 n≤7에서 통과 가능

# 🧠 (선택) 다른 효율적인 풀이 또는 알고리즘 제안:
# - 강한 가지치기:
#   * 끝자리가 짝수/5이고 길이≥2이면 확장 중단.
#   * 자리수합 % 3 == 0이고 값≥3이면 중단(3은 예외 아님).
# - 소수 판정 가속: MAX=10**len(numbers)까지 에라토스테네스 체 한 번 생성 후 조회.
# - 동일 깊이 내 중복 숫자에 대한 분기 스킵(예: 현재 레벨에서 사용한 d는 한 번만 시도).
