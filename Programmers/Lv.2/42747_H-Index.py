# 42747_H-Index.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 연구자의 논문 인용 횟수 리스트 citations가 주어질 때,
#   H-Index를 계산하여 반환.
# - H-Index 정의: 인용 횟수가 h 이상인 논문이 h편 이상일 때의 최대 h값
#
# ✅ 입력:
# - citations: 논문별 인용 횟수 리스트 (길이 1~1,000)
#
# ✅ 출력:
# - H-Index 정수
#
# ✅ 예시:
#   citations = [3, 0, 6, 1, 5] → H-Index = 3
# -----------------------------------------------------

def solution(citations):
    answer = 0  # H-Index 초기값 설정

    # 가능한 h 후보를 전체 논문 수부터 1까지 감소시키며 검사
    for i in range(len(citations), 0, -1):
        # 인용 횟수가 i 이상인 논문 수를 계산
        count = len([c for c in citations if c >= i])
        # 논문 수가 i 이상이면 H-Index 조건 만족
        if count >= i:
            return i  # 최대값부터 검사하므로 첫 만족 시 바로 반환

    return answer  # 모든 후보가 불충분하면 0 반환

# -----------------------------------------------------
# ✅ 나의 오답 및 실수:
# - 인용 횟수가 i 이상인 논문의 개수가 아니라 **인용 합계**를 구하는 `sum([...])`을 사용함
# - “개수 == i”로 동등 비교하여 “개수 ≥ i” 조건을 잘못 적용함
#
# ✅ GPT가 준 힌트 요약:
# - 인용 횟수가 i 이상인 논문의 **개수**를 `len([...])` 또는 `sum(1 for ...)`로 계산할 것
# - 비교는 **개수 ≥ i** (`if count >= i`)로 해야 H-Index 정의에 맞음
#
# ✅ 사용된 개념 요약:
# - 리스트 내포를 이용한 조건 필터링 및 개수 세기
# - for문을 역순으로 순회하여 최대값부터 조기 반환
# - early return 기법으로 불필요한 반복 최소화
#
# ✅ 시간 복잡도:
# - O(n²): n번의 후보 검사 × 각 검사마다 n번의 리스트 스캔
# - n ≤ 1,000 이므로 성능상 문제 없음
# -----------------------------------------------------
