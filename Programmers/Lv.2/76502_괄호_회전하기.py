# 76502_괄호_회전하기.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 문자열 s를 왼쪽으로 x칸 회전해 만들 수 있는 모든 문자열 중,
#   올바른 괄호 문자열의 개수를 구하는 문제.
# - 괄호 종류: (), [], {}
#
# ✅ 입력:
# - s: 괄호 문자열 (1 ≤ len(s) ≤ 1,000)
#
# ✅ 출력:
# - 올바른 괄호 문자열이 되는 회전 경우의 수
#
# ✅ 예시:
#   입력: s = "[](){}"
#   출력: 3
#
#   입력: s = "}]()[{"
#   출력: 2
# -----------------------------------------------------

def solution(s):
    answer = 0  # 올바른 괄호 문자열 개수 저장

    for i in range(len(s)):
        rotated = s[i:] + s[:i]  # ✅ 회전은 원본 s 기준으로 수행
        stack = []

        for bracket in rotated:
            if bracket == ")":
                if stack and stack[-1] == "(":
                    stack.pop()
                else:
                    stack.append(bracket)
            elif bracket == "]":
                if stack and stack[-1] == "[":
                    stack.pop()
                else:
                    stack.append(bracket)
            elif bracket == "}":
                if stack and stack[-1] == "{":
                    stack.pop()
                else:
                    stack.append(bracket)
            else:
                stack.append(bracket)

        if not stack:
            answer += 1

    return answer

# -----------------------------------------------------
# ✅ 나의 오답 및 실수:
# ❌ 회전 시 `s = s[i:] + s[:i]`로 s 자체를 갱신함
#    → 이후 회전에 원본이 아닌 누적 회전된 s를 다시 회전하여 잘못된 결과 발생
#    → 테스트 케이스에서 2번 회전과 5번 회전이 동일하게 나옴
#
# ✅ GPT가 준 힌트 요약:
# - 매번 회전을 수행할 때 **원본 문자열 s 기준**으로 해야 함
# - 매 반복마다 `rotated = s[i:] + s[:i]`로 회전 결과를 별도 변수에 저장할 것
#
# ✅ 사용된 개념 요약:
# - 스택을 활용한 괄호 짝 검사
# - 문자열 회전: s[i:] + s[:i]
# - 스택이 비었는지 여부로 올바른 괄호 판단
#
# ✅ 시간 복잡도:
# - O(n²): 길이 n에 대해 최대 n번 회전 × 각 회전마다 O(n)
# -----------------------------------------------------
