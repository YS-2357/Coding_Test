# 68936_쿼드압축_후_개수_세기.py
# -----------------------------------------------------
# ✅ 제목: 쿼드압축 후 개수 세기
# ✅ 문제 설명(요약):
# - 2^n × 2^n 이진 행렬을 쿼드로 분할·압축.
# - 구역의 값이 모두 같으면 하나의 블록으로 압축하고, 0/1 블록 개수를 반환.

# ✅ 입력 형식(요지):
# - arr: 2^n × 2^n 크기의 0/1 행렬

# ✅ 규칙 요약:
# 1) 구역 합 S가 0이면 0 블록 1개, S가 면적이면 1 블록 1개.
# 2) 아니면 4등분하여 재귀 처리.
# 3) 최종 결과는 [0블록개수, 1블록개수].

# ✅ 정답 코드(나의 풀이; 수정 금지)
def solution(arr):
    answer = []
    n = len(arr)
    cnt = [0, 0]
    
    psum = [[0]*(n+1) for _ in range(n+1)]
    for i in range(1, n+1):
        for j in range(1, n+1):
            psum[i][j] = arr[i-1][j-1] + psum[i-1][j] + psum[i][j-1] - psum[i-1][j-1]
            
    def div_conq(x, y, size):
        area = psum[x+size][y+size] - psum[x+size][y] - psum[x][y+size] + psum[x][y]
        if area == 0:
            cnt[0] += 1
            return
        if area == size * size:
            cnt[1] += 1
            return
        h = size // 2
        div_conq(x, y, h)
        div_conq(x+h, y, h)
        div_conq(x, y+h, h)
        div_conq(x+h, y+h, h)
            
    div_conq(0, 0, n)
            
    return cnt

# -----------------------------------------------------
# 🔍 첫 시도 결과:
# - 2D 누적합으로 임의 구역 합을 O(1)에 계산.
# - 분할정복 재귀로 중복 방문 없이 정확히 카운트 반환.

# 🔧 오답 및 실수(있었다면):
# - 없음. 1-based psum 인덱싱과 구역 합 공식 일치.
# - size==1인 리프도 area가 0/1로 귀결되어 정상 처리.

# 📚 사용된/필수 개념:
# - 분할정복(쿼드 트리), 2D 누적합, 사분면 재귀
# - 시간복잡도: psum O(N^2) + 재귀 O(방문구역수) ≈ O(N^2)
# - 공간복잡도: O(N^2)

# 🧠 (선택) 다른 효율적인 풀이 또는 알고리즘 제안:
# - 누적합 없이 구역 순회하며 조기중단(다름 발견 시 즉시 4분할)도 가능. 구현 단순, 최악은 느림.
# - 큰 입력에서 파이썬 재귀 한계를 대비하려면 비재귀 스택 방식으로도 구현 가능.
