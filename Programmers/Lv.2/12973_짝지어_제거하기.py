# 12973_짝지어_제거하기.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 문자열 s에서 같은 알파벳이 2개 연속으로 붙어 있는 경우, 그 두 문자를 제거한다.
# - 이 과정을 반복했을 때, 문자열이 완전히 비면 1, 아니면 0을 반환한다.

# ✅ 입력:
# - s: 알파벳 소문자로만 구성된 문자열 (길이 1 이상 1,000,000 이하)

# ✅ 출력:
# - 제거 후 문자열이 비면 1, 아니면 0

# ✅ 예시:
#   입력: "baabaa"
#   처리: "baabaa" → "b__baa" → "baa" → "b__a" → "a" → "" → 출력: 1
# -----------------------------------------------------

def solution(s):
    answer = 1       # 기본값: 제거 성공 시 1 반환
    stack = []       # 문자 저장용 스택 (연속된 문자가 있으면 제거)

    # 문자열의 각 문자를 순회
    for ch in s:
        if stack and stack[-1] == ch:
            # 스택이 비어있지 않고 마지막 문자와 현재 문자가 같으면 짝 → 제거(pop)
            stack.pop()
        else:
            # 그렇지 않으면 스택에 현재 문자 추가
            stack.append(ch)

    # 스택이 비어 있으면 모든 문자가 짝 제거됨 → 1 반환
    if stack:
        return 0     # 남은 문자가 있으면 실패 → 0 반환

    return answer    # 빈 문자열이면 1 반환

# -----------------------------------------------------
# ✅ 사용된 개념 요약:
# - **스택(Stack)**:
#   - LIFO(후입선출) 구조, 마지막 요소 확인/제거 용이
# - **알고리즘 흐름**:
#   - 스택의 top(마지막 요소)와 현재 문자가 같으면 pop → 짝 제거
#   - 다르면 push → 새 문자 유지
# - **시간 복잡도**:
#   - O(n): 각 문자는 최대 한 번 push, 한 번 pop
# - **공간 복잡도**:
#   - O(n): 최악의 경우 모든 문자가 스택에 들어감
# -----------------------------------------------------
