# 12941_최솟값_만들기.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 두 배열 A와 B가 주어졌을 때, 각 원소를 곱해 모두 더한 값의 합을 최소화해야 한다.
# - 배열의 순서를 자유롭게 바꿀 수 있다.
# - 최소합을 반환한다.

# ✅ 입력 형식:
# - A, B: 길이가 같은 두 배열 (1 ≤ len(A), len(B) ≤ 1,000)
# - 각 원소는 1 이상 100 이하의 정수.

# ✅ 출력 형식:
# - 최소합 (정수)

# ✅ 입출력 예제:
#   입력: A = [1, 4, 2], B = [5, 4, 4]
#   출력: 29
#   설명:
#   - A 오름차순: [1, 2, 4]
#   - B 내림차순: [5, 4, 4]
#   - 곱: 1×5 + 2×4 + 4×4 = 29
# -----------------------------------------------------

def solution(A, B):
    answer = 0  # 곱의 합을 저장할 변수

    # 1. A는 오름차순 정렬 (작은 값부터)
    A.sort()  # 예: [1, 4, 2] → [1, 2, 4]

    # 2. B는 내림차순 정렬 (큰 값부터)
    B.sort(reverse=True)  # 예: [5, 4, 4] → [5, 4, 4]

    # 3. 두 배열에서 하나씩 꺼내 곱하고 더함
    while A:  # A에 원소가 남아 있는 동안 반복
        # pop()은 리스트의 마지막 요소를 꺼내고 삭제
        # A.pop() → 가장 큰 값, B.pop() → 가장 작은 값 (정렬 상태 기준)
        answer += A.pop() * B.pop()

    # 4. 최종 합 반환
    return answer

# -----------------------------------------------------
# ✅ 사용된 개념 요약:
# - 정렬:
#   - A.sort(): 오름차순
#   - B.sort(reverse=True): 내림차순
# - 그리디 전략:
#   - 작은 값과 큰 값을 곱해야 전체 합을 최소화
# - 리스트 메서드:
#   - pop(): 마지막 요소 제거 및 반환
# - 시간 복잡도:
#   - 정렬: O(n log n)
#   - pop(): O(1) × n → O(n)
#   - 총합: O(n log n)
# -----------------------------------------------------
