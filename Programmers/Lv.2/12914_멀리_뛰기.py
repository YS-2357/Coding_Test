# 12914_멀리_뛰기.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 효진이는 1칸 또는 2칸을 점프할 수 있다.
# - 총 n칸을 끝까지 가는 방법의 수를 구하라.
# - 결과는 1234567로 나눈 나머지 반환.
#
# ✅ 입력:
# - n: 자연수 (1 ≤ n ≤ 2000)
#
# ✅ 출력:
# - 끝까지 도달하는 방법의 수 (mod 1234567)
#
# ✅ 예시:
#   입력: n = 4
#   출력: 5
#   이유: 가능한 경우 → (1,1,1,1), (1,1,2), (1,2,1), (2,1,1), (2,2)
# -----------------------------------------------------

def solution(n):
    answer = 0
    # ✅ memo[i] = i칸까지 가는 방법의 수
    memo = [0] * (n + 1)  # 크기 n+1로 초기화 (0 ~ n)
    
    # ✅ 초기값 설정:
    # 0칸: 1가지 (시작점)
    # 1칸: 1가지 (1칸 점프)
    memo[0] = 1
    memo[1] = 1
    
    # ✅ 점화식: memo[i] = memo[i-1] + memo[i-2]
    # 마지막 점프가 1칸 → i-1까지 방법 수
    # 마지막 점프가 2칸 → i-2까지 방법 수
    for i in range(2, n + 1):
        memo[i] = (memo[i - 1] + memo[i - 2]) % 1234567  # 큰 수 방지 위해 mod 적용
    
    # ✅ n칸까지의 경우의 수 반환
    return memo[n]

# -----------------------------------------------------
# ✅ 사용된 개념 요약:
# - **동적 계획법 (DP)**:
#   - 작은 문제(0칸, 1칸)부터 해결하고, 큰 문제를 점화식으로 해결
# - **점화식**:
#   - f(n) = f(n-1) + f(n-2) → 피보나치 수열
# - **mod 연산**:
#   - 결과값이 매우 커질 수 있으므로 중간 계산에서도 mod 1234567
# ✅ 시간 복잡도:
# - O(n): n 최대 2000 → 매우 빠름
# ✅ 공간 복잡도:
# - O(n): memo 배열 사용
# -----------------------------------------------------
