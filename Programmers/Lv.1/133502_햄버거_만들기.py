# 133502_햄버거_만들기.py
# -----------------------------------------------------
# ✅ 제목: 햄버거 만들기
# ✅ 문제 설명(요약):
# - 재료가 순서대로 주어진다 (1=빵, 2=야채, 3=고기).
# - 스택에 재료를 쌓다가, 마지막 4개가 [1,2,3,1]이 되면 햄버거 1개 완성.
# - 완성 시 그 4개 재료는 제거되고, 이어지는 재료들과 다시 조합 가능(연쇄 처리).
# - 최종적으로 완성된 햄버거 개수를 반환.
#
# ✅ 입력 형식(요지):
# - ingredient: List[int], 각 원소는 1~3의 정수(재료 번호).
#
# ✅ 규칙 요약:
# 1) 스택을 사용해 순서대로 push.
# 2) 스택 길이가 4 이상이면 뒤에서 4개 확인.
# 3) [1,2,3,1]이면 pop 4번 → 햄버거 카운트 +1.
# 4) 모든 재료 처리 후 카운트 반환.
#
# ✅ 정답 코드(너의 풀이; 한 줄마다 주석):
def solution(ingredient):
    answer = 0              # 완성된 햄버거 개수 카운트
    stack = []              # 재료를 순서대로 쌓을 스택
    
    for i in ingredient:    # 재료를 하나씩 처리
        stack.append(i)     # 현재 재료를 스택에 쌓음
        if len(stack) >= 4:                 # 스택에 4개 이상 있어야 햄버거 패턴 검사 가능
            while stack[-4:] == [1, 2, 3, 1]:  # 스택 마지막 4개가 햄버거 패턴과 일치하면
                answer += 1                  # 햄버거 1개 완성
                for _ in range(4):           # 재료 4개 제거
                    stack.pop()
    return answer            # 최종 햄버거 개수 반환

# -----------------------------------------------------
# 🔍 첫 시도 결과:
# - 한 번에 정답. 연쇄 제거도 while문으로 자연스럽게 처리됨.
#
# 🔧 오답 및 실수(무엇을 틀렸고 어떻게 고쳤는지):
# - 별도 오답 없음. 다만 최적화 가능성 있음:
#   * while 대신 if로도 충분(패턴이 겹칠 경우 pop 후 다음 루프에서 다시 검사됨).
#   * 현재 구조에서도 정답에는 영향 없음.
#
# 📚 사용된/필수 개념(최소):
# - 스택(LIFO) 구조를 이용한 패턴 매칭
# - 패턴 검출 시 pop으로 연쇄 처리
# - 시간복잡도: O(n) (n=재료 개수, 각 재료 최대 한 번 push/pop)
# - 공간복잡도: O(n) (최대 스택 크기)
