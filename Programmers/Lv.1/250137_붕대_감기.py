# 250137_붕대_감기.py
# -----------------------------------------------------
# ✅ 제목: 붕대 감기 — 연속 회복/보너스와 공격 처리 시뮬레이션
# ✅ 문제 설명(요약):
# - bandage=[t,x,y]: 연속으로 t초 동안 붕대를 감으면 매초 x 회복, 연속 t초 성공 시 추가로 y 회복.
# - 체력 상한은 health. 매 공격 초에는 회복이 없고 연속이 끊긴다(콤보 0).
# - attacks=[[time,damage], ...]를 시간 순으로 적용하며, 체력이 0 이하가 되면 -1 반환.
#
# ✅ 입력 형식(요지):
# - bandage: [t(int), x(int), y(int)]
# - health: int (최대 체력)
# - attacks: List[[time(int), damage(int)]], time 오름차순 가정
#
# ✅ 규칙 요약:
# - 비공격 초: cur += x, 연속 카운트+1; 연속이 t가 되면 cur += y 하고 연속 0으로 초기화.
# - 공격 초: cur -= damage, 즉사 시 -1; 이 초에는 회복 없음, 연속은 0으로 초기화.
# - 매 초마다 cur은 health를 초과할 수 없음.
#
# ✅ 입출력 예시(1개):
# - bandage=[5,1,5], health=30, attacks=[[2,10],[9,15],[10,5],[11,5]]
#   → 규칙에 따라 시뮬레이션한 최종 체력값을 반환(예시는 문제 페이지 참조).

def solution(bandage, health, attacks):
    answer = -1                              # 요구 명세상 미사용(최종에는 cur 반환)
    bt, bx, by = bandage                     # bt: 연속 필요 초, bx: 매초 회복, by: 보너스 회복

    cur = health                             # 현재 체력(시작은 최대 체력)
    combo = 0                                # 연속 성공 초(공격 시 0으로 리셋)
    
    max_time = attacks[-1][0]                # 마지막 공격 시각까지만 시뮬레이션
    attack_time_to_dmg = {time: dmg for time, dmg in attacks}  # 공격 시각→피해량 매핑
    
    for t in range(1, max_time+1):           # 1초부터 마지막 공격 시각까지 순차 시뮬레이션
        if attack_time_to_dmg.get(t, 0) != 0:# 이 초에 공격이 있으면
            cur -= attack_time_to_dmg[t]     #   피해 적용
            if cur <= 0:                     #   즉사 판정
                return -1                    #   -1 반환
            combo = 0                        #   공격 초에는 연속이 끊김
        else:                                # 이 초에 공격이 없으면(안전 초)
            combo += 1                       #   연속 카운트 증가
            cur += bx                        #   매초 회복 x 적용
            if combo == bt:                  #   연속 t초 달성 시
                combo = 0                    #     연속 초기화
                cur += by                    #     보너스 y 회복
        
        if cur > health:                     # 체력 상한 적용
            cur = health
        print(cur)                           # (디버그 출력) 제출 시 제거 권장
    return cur                               # 모든 공격 처리 이후 남은 체력 반환

# -----------------------------------------------------
# 🔍 첫 시도 결과:
# - 한 번에 정답 **미도달** → 이후 수정(콤보 리셋/상한 처리/순서 정립) 반영
#
# 🔧 오답 및 실수, 그리고 어떻게 고쳤는지:
# 1) 공격 초에 콤보 리셋 누락 → 공격 처리 직후 `combo=0`으로 수정.
# 2) 체력 상한을 상수 30으로 고정 → 입력 `health`를 상한으로 적용하도록 수정.
# 3) 처리 순서 혼선 → “공격 초: 피해→즉사판정→콤보0 / 안전 초: 기본회복→콤보+1→보너스”로 정립.
# 4) (주의) 현재 코드에 `print(cur)` 디버그가 남아 있음 → 제출 시 제거 권장.
#
# 📚 사용된/필수 개념(최소):
# - 시간 단위 시뮬레이션(1초씩 진행)
# - 연속 카운트(콤보)와 보너스 트리거
# - 상태 캡(최대 체력) 및 즉사 조건 처리
