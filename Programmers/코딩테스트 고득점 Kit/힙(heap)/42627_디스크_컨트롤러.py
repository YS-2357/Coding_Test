# 42627_디스크 컨트롤러.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 하드디스크는 작업 요청이 들어온 순서대로 하나씩 처리함
# - 요청 시간(request), 소요 시간(duration)이 주어짐
# - 작업 요청 ~ 종료까지 걸린 시간의 평균을 가장 작게 만들도록 처리하라
# - 조건: 가능한 작업 중 **소요 시간이 가장 짧은 작업을 우선 처리**

# ✅ 입력 형식:
# - jobs: [요청시간, 소요시간] 형태의 작업 리스트 (1 ≤ len(jobs) ≤ 500)

# ✅ 출력 형식:
# - 작업별 소요 시간 평균의 정수 부분

# ✅ 입출력 예제:
#   입력: [[0, 3], [1, 9], [2, 6]]
#   출력: 9

# -----------------------------------------------------

import heapq as hq  # 최소 힙 기능을 위한 heapq 모듈 import

def solution(jobs):
    time, answer, idx, n = 0, 0, 0, len(jobs)  # 현재 시각, 누적 시간, 인덱스, 총 작업 수 초기화
    jobs.sort()  # 요청 시간 기준으로 정렬
    heap = []  # 힙 초기화 (소요시간, 요청시간) 구조로 push

    while idx < n or heap:  # 모든 작업을 처리할 때까지 반복
        while idx < n and jobs[idx][0] <= time:  # 현재 시간까지 요청된 작업을 힙에 추가
            hq.heappush(heap, (jobs[idx][1], jobs[idx][0]))  # (소요시간, 요청시간) 순으로 push
            idx += 1

        if heap:
            duration, request = hq.heappop(heap)  # 소요시간이 가장 짧은 작업 꺼냄
            time += duration  # 현재 시각 갱신
            answer += time - request  # 요청부터 종료까지의 시간 누적
        else:
            time = jobs[idx][0]  # 대기 중일 경우, 다음 요청 시각으로 점프

    answer = answer // n  # 평균 구하기 (정수 나눗셈)
    return answer  # 결과 반환

# -----------------------------------------------------
# ✅ 나의 오답 및 실수:
# ❌ (초기 코드) 모든 작업을 한 번에 힙에 넣어 시간 흐름 고려하지 않음
# ❌ time 변수 오타(tiem)로 무한 루프 발생 → 시간초과
# ❌ 평균 계산을 duration - request로 잘못 계산한 적 있음

# ✅ GPT가 준 힌트 요약:
# - 현재 시간보다 요청 시간이 빠른 작업만 heap에 넣고 진행해야 함
# - 작업이 없을 경우 time을 다음 요청 시각으로 점프
# - 힙에는 (소요시간, 요청시간) 순서로 넣어야 SJF 방식에 맞음

# ✅ 사용된 개념 요약:
# - 최소 힙(heapq): 소요 시간이 가장 짧은 작업을 빠르게 선택
# - SJF(Shortest Job First) 스케줄링 알고리즘 구현
# - 요청시간 기반 정렬 + 시간 흐름 시뮬레이션
# - 조건에 따라 time 점프, 평균 계산을 위한 누적 처리

# -----------------------------------------------------
