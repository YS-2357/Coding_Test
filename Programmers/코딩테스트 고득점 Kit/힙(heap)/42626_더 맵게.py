# 42626_더 맵게.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 스코빌 지수가 낮은 두 음식을 섞어 모두 K 이상으로 만들고자 함
# - 섞는 공식: 가장 맵지 않은 음식 + (두 번째로 맵지 않은 음식 × 2)
# - 최소 몇 번의 연산이 필요한지를 구하라 (불가능하면 -1 반환)

# ✅ 입력 형식:
# - scoville: 음식들의 스코빌 지수가 담긴 리스트 (1 ≤ 길이 ≤ 1,000,000)
# - K: 원하는 최소 스코빌 지수 (0 ≤ K ≤ 1,000,000,000)

# ✅ 출력 형식:
# - 모든 음식의 스코빌 지수가 K 이상이 되도록 섞은 최소 횟수 (불가능하면 -1)

# ✅ 입출력 예제:
#   입력: [1, 2, 3, 9, 10, 12], K = 7
#   출력: 2

# -----------------------------------------------------

import heapq  # 최소 힙을 사용하기 위한 heapq 모듈 import

def solution(scoville, K):
    answer = 0  # 섞는 횟수를 저장할 변수 초기화
    heapq.heapify(scoville)  # 리스트를 최소 힙 구조로 변환
    
    # 가장 작은 음식의 스코빌이 K 이상이 될 때까지 반복
    while len(scoville) > 1:
        minimun = heapq.heappop(scoville)  # 가장 맵지 않은 음식 꺼냄
        if minimun >= K:  # 이미 K 이상이면 섞을 필요 없음
            return answer
        small2 = heapq.heappop(scoville)  # 두 번째로 맵지 않은 음식 꺼냄
        mixed = minimun + 2 * small2  # 섞은 음식의 스코빌 지수 계산
        heapq.heappush(scoville, mixed)  # 새 음식을 힙에 삽입
        answer += 1  # 섞은 횟수 증가

    # 마지막 1개 남은 경우: 그것도 K 이상인지 확인
    if scoville[0] >= K:
        return answer
    
    return -1  # 조건 만족 불가한 경우

# -----------------------------------------------------
# ✅ 나의 오답 및 실수:
# ❌ 마지막 한 개 남은 음식이 K 이상인지 검사하지 않아 일부 테스트 실패
# ❌ 최소값이 K 이상이어도 두 개씩 무조건 pop해서 불필요한 연산 진행

# ✅ GPT가 준 힌트 요약:
# - heappop()은 최소값을 바로 꺼내므로 가장 작은 값만 확인하면 됨
# - while 종료 후에도 scoville[0] 값이 K 이상이면 성공 처리해야 함

# ✅ 사용된 개념 요약:
# - 힙(heap) 자료구조: 최소값을 빠르게 추출하기 위해 사용
# - heapq 모듈: 최소 힙을 구현 (heappop, heappush, heapify)
# - 우선순위 큐 기반의 greedy 전략
# - 종료 조건 및 예외 처리: 마지막 원소가 조건을 만족하는지 확인 필수

# -----------------------------------------------------
