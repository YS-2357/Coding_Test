# 43165_타겟넘버.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 주어진 정수 배열 numbers에서 각 숫자에 + 또는 -를 붙여,
#   합이 target이 되는 경우의 수를 구하는 문제입니다.

# ✅ 입력 형식:
# - numbers: 길이 2 이상 20 이하의 정수 배열
# - target: -1000 이상 1000 이하의 정수

# ✅ 출력 형식:
# - 합이 target이 되도록 만드는 경우의 수 (정수)

# ✅ 입출력 예제:
# 예제 1:
#   입력: numbers = [1, 1, 1, 1, 1], target = 3
#   출력: 5
# 예제 2:
#   입력: numbers = [4, 1, 2, 1], target = 4
#   출력: 2
# -----------------------------------------------------

def solution(numbers, target):
    answer = 0

    def dfs(idx, total):
        nonlocal answer  # 함수 내부에서 바깥 변수 answer 접근
        if idx == len(numbers):  # 모든 숫자 사용했을 때
            if total == target:  # 합이 목표값이면 카운트
                answer += 1
            return
        dfs(idx + 1, total + numbers[idx])  # 현재 숫자를 더함
        dfs(idx + 1, total - numbers[idx])  # 현재 숫자를 뺌

    dfs(0, 0)
    return answer

# -----------------------------------------------------
# ✅ 나의 오답 및 실수:
# ❌ idx와 total을 업데이트하는 로직이 잘못됨 (total += 은 원상복구 안됨)
# ❌ idx == len(numbers) 비교식에서 = 하나만 사용함 (문법 오류)
# ❌ answer를 전역변수로 선언했지만 비효율적이며 함수 내부에서는 nonlocal로 쓰는 것이 바람직함

# ✅ GPT가 준 힌트 요약:
# - 각 숫자에 대해 +와 - 두 가지 분기 필요
# - dfs(idx, total): 현재 인덱스까지 합 total로 탐색
# - 종료 조건: idx == len(numbers)
# - 조건 만족 시 정답 카운트 증가

# ✅ 사용된 개념 요약:
# - DFS: 모든 경우의 수 탐색
# - 재귀 호출로 완전탐색 구현
# - nonlocal 키워드로 외부 변수 제어
# - 문제 크기 (2^20) → 완전탐색 가능
# -----------------------------------------------------
