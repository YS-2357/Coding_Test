# 43238_입국심사.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - n명의 사람이 입국심사를 받아야 한다.
# - 심사관마다 심사 소요 시간이 다르며(times), 각 심사대는 동시에 심사 가능하다.
# - 모든 사람이 심사를 완료하는 데 걸리는 최소 시간을 구하라.

# ✅ 입력 형식:
# - n: 입국심사를 받아야 하는 사람 수 (1 ≤ n ≤ 1,000,000,000)
# - times: 각 심사관이 한 명을 심사하는 데 걸리는 시간 리스트 (1 ≤ len(times) ≤ 100,000)

# ✅ 출력 형식:
# - 모든 사람이 심사를 마칠 때까지 걸리는 최소 시간 (정수)

# ✅ 입출력 예제:
#   입력: n = 6, times = [7, 10]
#   출력: 28
#   (1번 심사관: 7,14,21 / 2번 심사관: 10,20,30 → 최소 28분)

# -----------------------------------------------------

def solution(n, times):
    # 가능한 최소 시간은 가장 빠른 심사관이 1명 처리할 때 (min(times))
    low = min(times)

    # 가능한 최대 시간은 가장 느린 심사관이 모든 n명을 처리할 때 (n * max(times))
    high = n * max(times)

    # 최소 시간을 저장할 변수 (처음에는 high로 초기화)
    answer = high

    # 이분 탐색 시작 (low ~ high)
    while low <= high:
        mid = (high + low) // 2  # 중간값 (현재 시간 후보)

        # mid 시간 동안 처리 가능한 사람 수 계산
        time = sum(mid // t for t in times)

        # 처리 가능한 사람이 n명 이상이면 → 시간을 줄여도 됨
        if time >= n:
            answer = mid       # 가능한 답 후보 저장
            high = mid - 1     # 더 작은 시간 탐색
        else:
            low = mid + 1      # 시간이 부족 → 더 큰 시간 탐색

    return answer  # 모든 사람이 심사를 완료하는 최소 시간 반환

# -----------------------------------------------------
# ✅ GPT가 준 힌트 요약:
# - 완전 탐색은 불가능하므로 **이분 탐색(이진 탐색)**으로 범위를 줄여야 함
# - mid(현재 시간) 동안 각 심사대가 처리할 수 있는 인원 수를 합산해 조건 판단
# - 조건: `time >= n` → 시간이 충분하므로 더 작은 시간 탐색 가능

# ✅ 사용된 개념 요약:
# - **이분 탐색(Binary Search)**: 탐색 범위를 반씩 줄이는 방식
# - **그리디 원리**: 가능한 시간 범위 내에서 최적해를 점점 좁힘
# - **시간 복잡도**: O(log(n * max(times)) * len(times)) → 매우 효율적
# - **누적 합 계산**: `mid // t` → mid 시간 동안 각 심사대가 처리 가능한 사람 수

# -----------------------------------------------------
