# 43236_징검다리.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 출발점과 도착점 사이에 여러 개의 돌이 놓여 있고, 전체 거리(distance)가 주어진다.
# - 돌의 위치 배열(rocks)와 제거할 수 있는 돌의 개수(n)가 주어진다.
# - 돌을 최대 n개 제거할 때, 남은 돌 사이의 최소 거리의 최댓값을 구하라.

# ✅ 입력 형식:
# - distance: 전체 거리 (1 ≤ distance ≤ 1,000,000,000)
# - rocks: 돌 위치 리스트 (1 ≤ len(rocks) ≤ 50,000)
# - n: 제거할 수 있는 돌 개수 (0 ≤ n < len(rocks))

# ✅ 출력 형식:
# - 가능한 최소 거리의 최댓값 (정수)

# ✅ 입출력 예제:
#   입력: distance = 25, rocks = [2, 14, 11, 21, 17], n = 2
#   출력: 4
# -----------------------------------------------------

def solution(distance, rocks, n):
    answer = 0
    
    # 돌 위치 정렬 후, 출발점(0)과 도착점(distance) 추가
    rocks.sort()
    rocks = [0] + rocks + [distance]
    
    # 이분 탐색을 위한 초기 범위: 최소 거리 1, 최대 거리 distance
    left, right = 1, distance
    
    # 이분 탐색 시작
    while left <= right:
        mid = (left + right) // 2  # mid: 최소 거리 후보
        removed = 0               # 제거한 돌 개수
        previous = 0              # 마지막으로 남긴 돌의 위치
        
        # 돌들을 순회하면서 mid보다 작은 간격이면 돌 제거
        for i in range(1, len(rocks)):
            if rocks[i] - previous < mid:
                removed += 1  # 현재 돌 제거
            else:
                previous = rocks[i]  # 돌을 남기고 위치 갱신
        
        # 제거한 돌 개수가 n 이하라면 → mid 가능 → 더 큰 값 탐색
        if removed <= n:
            answer = mid         # 현재 mid는 조건 만족 → 답 후보 저장
            left = mid + 1       # 더 큰 최소 거리 탐색
        else:
            right = mid - 1      # 조건 불만족 → 범위 줄임
    
    return answer  # 최소 거리의 최댓값 반환

# -----------------------------------------------------
# ✅ 나의 오답 및 실수:
# ❌ 처음에는 모든 조합을 시도해야 한다고 착각 (불가능: 시간 초과)
# ❌ 완전 탐색 대신 "가능 여부 판별"로 접근해야 함

# ✅ GPT가 준 힌트 요약:
# - Parametric Search(이분 탐색)로 "최소 거리 X 유지 가능 여부"를 확인
# - 검증은 그리디 방식: 앞에서부터 돌을 순회하며 거리 < X이면 제거
# - 제거 횟수가 n 이하 → 가능 / 초과 → 불가능

# ✅ 사용된 개념 요약:
# - **이분 탐색(Parametric Search)**: 값 범위에서 조건 만족하는 최대값 찾기
# - **그리디 검증**: mid보다 가까운 돌은 제거
# - **시간 복잡도**: O(M log D) (M=len(rocks), D=distance)
#   → 매우 효율적 (50,000 rocks, distance ≤ 10억에서도 가능)

# -----------------------------------------------------
