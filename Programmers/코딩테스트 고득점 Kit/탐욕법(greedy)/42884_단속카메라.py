# 42884_단속카메라.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 차량이 고속도로를 이동하며 각 차량의 "진입 지점"과 "진출 지점"이 주어진다.
# - 모든 차량이 최소 한 번 단속카메라를 만나도록 하면서 카메라 개수를 최소화해야 한다.
# - 카메라는 한 지점에 설치 가능하며, 그 지점을 지나는 모든 차량을 단속한다.

# ✅ 입력 형식:
# - routes: 2차원 리스트 [[진입 지점, 진출 지점], ...]
#   (-30,000 ≤ 진입/진출 ≤ 30,000, 차량 수 ≤ 10,000)

# ✅ 출력 형식:
# - 최소 카메라 설치 개수 (정수)

# ✅ 입출력 예제:
#   입력: [[-20,-15], [-14,-5], [-18,-13], [-5,-3]]
#   출력: 2
#   설명:
#   - 첫 번째 카메라: -15 ([-20,-15], [-18,-13], [-14,-5] 커버)
#   - 두 번째 카메라: -3 ([-5,-3] 커버)
# -----------------------------------------------------

def solution(routes):
    answer = 0  # 설치한 카메라 개수
    # 1. 차량의 진출 지점 기준으로 정렬
    routes.sort(key=lambda x: x[1])
    
    # 2. 현재 설치된 카메라의 위치를 저장 (처음엔 아주 작은 값)
    camera = -30000  # 문제에서 진입/진출 최소값이 -30000이므로 초기값
    
    # 3. 각 차량(route)을 순회하며 카메라 설치 여부 결정
    for route in routes:
        # route = [진입 지점, 진출 지점]
        # 현재 카메라가 이 차량을 커버할 수 없으면 새 카메라 설치
        if camera < route[0]:  # 카메라가 차량의 진입 지점보다 왼쪽에 있다면
            camera = route[1]  # 새 카메라를 이 차량의 '진출 지점'에 설치
            answer += 1        # 카메라 개수 증가
    
    # 4. 모든 차량 처리 후 카메라 개수 반환
    return answer

# -----------------------------------------------------
# ✅ 나의 오답 및 실수:
# ❌ 초기 구현에서 pop(0)을 사용 → O(N^2)로 비효율적
# ❌ 차량 하나만 확인 후 pop → 여러 차량을 커버하지 못함
# ❌ routes가 비었을 때 routes[0] 접근 → IndexError 발생

# ✅ GPT가 준 힌트 요약:
# - 카메라 설치는 항상 "진출 지점"에 해야 커버 가능한 차량 최대화 (그리디 전략)
# - 차량 구간을 진출 지점 기준으로 정렬 후 순차 처리
# - 기존 pop 방식 대신 for 루프로 순회 (O(N log N)으로 효율성 확보)

# ✅ 사용된 개념 요약:
# - 그리디 알고리즘:
#   → 매번 가장 뒤쪽에서 커버 가능한 차량들을 최대한 커버하는 전략 선택
# - 구간 문제(Interval Scheduling):
#   → 종료 시점을 기준으로 정렬하면 최소 자원으로 최대 구간 커버 가능
# - 시간 복잡도: O(N log N) (정렬) + O(N) (순회)
# -----------------------------------------------------
