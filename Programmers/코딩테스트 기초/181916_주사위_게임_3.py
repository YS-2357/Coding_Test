# 181916_주사위_게임_3.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 주사위 4개의 숫자가 주어질 때, 다음 규칙에 따라 점수를 계산:
#   1. 4개 모두 같으면: 1111 * p
#   2. 3개 같으면: (10 * p + q)^2
#   3. 2쌍(2개씩 동일): (p + q) * |p - q|
#   4. 2개 같으면: q * r (나머지 두 숫자의 곱)
#   5. 모두 다르면: 가장 작은 값
#
# ✅ 입력:
# - 네 개의 정수 a, b, c, d
#
# ✅ 출력:
# - 규칙에 따른 점수
#
# -----------------------------------------------------

def solution(a, b, c, d):
    nums = [a, b, c, d]  # 주어진 네 개의 주사위 값 리스트로 저장
    counts = {}  # 각 숫자의 등장 횟수를 저장할 딕셔너리 초기화

    # ✅ 각 숫자의 등장 횟수 카운트
    for num in nums:
        counts[num] = counts.get(num, 0) + 1  # 기존 값이 있으면 +1, 없으면 1로 설정

    # ✅ 경우 1: 네 개가 모두 같음 (딕셔너리 길이가 1)
    if len(counts) == 1:
        return 1111 * a  # 모든 숫자가 동일하므로 아무 숫자나 사용

    # ✅ 경우 2: 두 가지 숫자만 존재 (길이가 2 → 3:1 또는 2:2)
    elif len(counts) == 2:
        p, q = list(counts.keys())  # 두 숫자 추출

        # ✅ 2:2 형태 → 두 쌍이 동일
        if counts[p] == 2 and counts[q] == 2:
            return (p + q) * abs(p - q)

        # ✅ 3:1 형태 → p 또는 q 중 하나가 3번 등장
        else:
            # p가 3번 등장하는 경우
            if counts[p] == 3:
                return (10 * p + q) ** 2
            # q가 3번 등장하는 경우
            else:
                return (10 * q + p) ** 2

    # ✅ 경우 3: 세 가지 숫자가 존재 (2:1:1 형태)
    elif len(counts) == 3:
        p, q, r = list(counts.keys())  # 세 숫자 추출
        # ✅ 두 개가 같은 숫자 찾기 → counts[x] == 2인 값
        if counts[p] == 2:
            return q * r  # 나머지 두 숫자의 곱
        elif counts[q] == 2:
            return p * r
        else:
            return p * q

    # ✅ 경우 4: 네 가지 숫자가 모두 다름
    else:
        return min(nums)  # 가장 작은 값 반환

# -----------------------------------------------------
# ✅ 사용된 개념 요약:
# - 딕셔너리로 숫자별 등장 횟수 카운트
# - 조건 분기:
#   - len(counts) 값으로 형태 구분 (1, 2, 3, 4)
# - 수학적 규칙 적용:
#   - 1111*p, (10*p+q)^2, (p+q)*|p-q|, q*r
#
# ✅ 시간 복잡도:
# - O(1) → 입력 크기 고정(4개 숫자)
# -----------------------------------------------------
