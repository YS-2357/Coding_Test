# 181923_수열과_구간_쿼리_2.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 정수 배열 arr와 queries가 주어진다.
# - 각 쿼리 [s, e, k]에 대해:
#   - 인덱스 s부터 e까지 중에서 k보다 큰 값 중 최소값을 찾아 반환.
#   - 없으면 -1 반환.
#
# ✅ 입력:
# - arr: 정수 배열
# - queries: [[s, e, k], ...]
#
# ✅ 출력:
# - 각 쿼리 결과를 순서대로 담은 리스트
#
# ✅ 예시:
#   입력: arr = [0, 1, 2, 4, 3], queries = [[0, 4, 2], [0, 3, 2], [0, 2, 2]]
#   출력: [3, 4, -1]
# -----------------------------------------------------

def solution(arr, queries):
    answer = []  # 결과를 담을 리스트

    # ✅ 모든 쿼리에 대해 반복
    for s, e, k in queries:
        min_val = float('inf')  # 최소값을 저장할 변수 (초기값: 무한대)
        found = False           # k보다 큰 값이 있는지 여부
        
        # ✅ s부터 e까지 순회
        for i in range(s, e + 1):
            if arr[i] > k:                      # 조건: k보다 큰 값
                min_val = min(min_val, arr[i])  # 최소값 갱신
                found = True                    # 조건 만족 시 True로 설정
        
        # ✅ 결과 저장
        if found:
            answer.append(min_val)  # 최소값 추가
        else:
            answer.append(-1)       # 없으면 -1 추가

    return answer

# -----------------------------------------------------
# ✅ 사용된 개념 요약:
# - **브루트포스 탐색**:
#   - 쿼리마다 지정 구간 순회 (O(n*q) = 1,000*1,000 = 1,000,000 → 가능)
# - **float('inf')**:
#   - 최소값 초기값 설정용
# - 조건문 활용:
#   - arr[i] > k인 값 중 최솟값만 선택
#
# ✅ 시간 복잡도:
# - O(len(arr) * len(queries)) → 최대 10^6 → 충분히 빠름
# -----------------------------------------------------
