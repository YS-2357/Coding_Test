# 70129_이진_변환_반복하기.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 문자열 s는 0과 1로 이루어진 이진수 문자열이다.
# - 다음 과정을 s가 "1"이 될 때까지 반복한다:
#   1. 문자열에서 '0'을 모두 제거하고 남은 길이를 구한다.
#   2. 그 길이를 이진수로 변환해 다시 s에 저장한다.
# - 반복 횟수와 제거된 '0'의 총 개수를 [count, zeros]로 반환한다.

# ✅ 입력:
# - s: 이진 문자열 (길이 1~150,000)

# ✅ 출력:
# - [변환 횟수, 제거된 0의 개수]

# ✅ 예시:
#   입력: "110010101001"
#   출력: [3, 8]
# -----------------------------------------------------

def solution(s):
    zero = 0      # 제거된 '0'의 총 개수
    trans = 0     # 변환 횟수

    # s가 "1"이 될 때까지 반복
    while s != "1":
        trans += 1  # 변환 횟수 증가
        zero += s.count("0")  # 현재 문자열에서 '0' 개수 누적
        # (len(s) - s.count("0")) → '0' 제거 후 남은 길이
        # bin()으로 이진 변환, [2:]로 '0b' 제거
        s = bin(len(s) - s.count("0"))[2:]
        # 디버깅용 출력 (문제 제출 시 제거 가능)
        # print(s)

    return [trans, zero]  # 변환 횟수와 제거된 '0' 개수 반환

# -----------------------------------------------------
# ✅ 사용된 개념 요약:
# - 문자열 메서드:
#   - count("0"): 문자열에서 '0' 개수 세기
#   - len(s): 문자열 길이
# - 이진수 변환:
#   - bin(n): 정수 → 이진 문자열 (예: bin(6) → '0b110')
#   - [2:]: '0b' 제거 후 실제 이진수 부분만 추출
# - 반복문 종료 조건:
#   - s가 "1"이 될 때까지 반복
# - 시간 복잡도:
#   - 각 변환에서 count(), len()는 O(n)
#   - 변환 횟수는 log n 수준 → 전체 O(n log n) 이내
# -----------------------------------------------------
