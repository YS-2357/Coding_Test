# 120863_다항식_간단히_정리하기.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - “+”로 연결된 다항식 문자열 polynomial이 주어집니다.
# - x¹ 항과 상수항을 각각 합산한 뒤, 같은 차수끼리 묶어
#   계수 1인 x¹ 항은 “x”, 계수 >1인 x¹ 항은 “<계수>x”,
#   상수항은 “<값>” 형태로 출력합니다.
# - 두 항이 모두 있으면 “x항 + 상수항”으로, 하나만 있으면 해당 항만 반환합니다.
#
# ✅ 입력:
# - polynomial: “<항> + <항> + …” 형태 문자열
#   - 각 항은 “x”, “<정수>x”, 또는 “<정수>” 중 하나
#
# ✅ 출력:
# - 정리된 다항식 문자열
#
# ✅ 예시:
#   입력: "3x + 7 + x"      → 출력: "4x + 7"
#   입력: "x + x + x"        → 출력: "3x"
#   입력: "5 + 3"           → 출력: "8"
#   입력: "10x + 2x + 8 + 4" → 출력: "12x + 12"
# -----------------------------------------------------

def solution(polynomial):
    # ✅ “ + ” 기준으로 항 분리
    terms = polynomial.split(' + ')
    x_coef = 0     # x¹ 계수 합산용
    const = 0      # 상수항 합산용

    # ✅ 각 항 파싱
    for term in terms:
        if term.endswith('x'):           # x¹ 항
            if term == 'x':              # “x”는 계수 1
                x_coef += 1
            else:                        # “<정수>x”는 숫자 부분만 int 변환
                x_coef += int(term[:-1])
        else:                            # 상수항
            const += int(term)

    # ✅ 결과 문자열 구성
    result = ''
    # x항 처리 (계수 >0일 때만)
    if x_coef > 0:
        result += 'x' if x_coef == 1 else f'{x_coef}x'
    # 상수항 처리
    if const != 0:
        if result:                      # 이미 x항이 있으면 “ + ”
            result += ' + ' + str(const)
        else:                           # x항 없으면 상수만
            result = str(const)

    return result

# -----------------------------------------------------
# ✅ 사용된 개념 요약:
# - 문자열 분리: split(' + ')  
# - 항 파싱: endswith('x')로 x¹ 항 식별, term[:-1]로 계수 추출  
# - 동류항 합산: x_coef, const 누적  
# - 문자열 포맷: 계수 1일 땐 “x”, >1일 땐 “<계수>x”, 상수는 str(const)
#
# ✅ 나의 오답 및 실수:
# - 초기에 x항 계수가 0일 때도 “0x”를 출력하려 했음  
# - 계수 1인 경우 “1x”로 잘못 출력했음  
# - split() 기본 사용으로 “+” 기호만 분리하다가 공백 처리가 복잡해짐
#
# ✅ GPT가 준 힌트 요약:
# - split(' + ')로 “ + ” 단위 분리  
# - x항은 계수 >0일 때만 처리, 계수 1일 때는 숫자 생략 (“x”)  
# - 상수항은 따로 추가하되, x항 유무에 따라 “ + ” 연결
#
# ✅ 시간 복잡도:
# - O(m), m = number of terms in polynomial (최대 길이 100)  
# - 매우 빠름
# -----------------------------------------------------
