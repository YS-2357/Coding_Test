# 120890_가까운_수.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 주어진 정수 리스트 array에서 정수 n과 가장 가까운 수를 찾는다.
# - 가장 가까운 수가 여러 개라면, **더 작은 수를 반환**한다.
#
# ✅ 입력:
# - array: 정수 리스트 (길이 1 이상 100 이하)
# - n: 기준 정수 (1 ≤ n ≤ 100)
#
# ✅ 출력:
# - n과 가장 가까운 수 (거리 같다면 더 작은 수)
#
# ✅ 예시:
#   입력: array = [3, 10, 28], n = 20
#   출력: 28
#
#   입력: array = [10, 11, 12], n = 13
#   출력: 12
# -----------------------------------------------------

def solution(array, n):
    # ✅ 정렬 기준:
    # - 첫 번째 기준: abs(x - n) → 거리
    # - 두 번째 기준: 값 자체 → 거리가 같으면 더 작은 수가 앞으로 오도록
    array.sort(key=lambda x: (abs(x - n), x))

    # ✅ 정렬 후 가장 앞에 있는 값이 조건을 만족하는 정답
    return array[0]

# -----------------------------------------------------
# ✅ 나의 오답 및 실수:
# ❌ 거리만 비교하고, 거리가 같은 경우 더 작은 수를 고려하지 않으면 오답 발생 가능
# ❌ 예: array = [10, 11, 12], n = 13 → 11과 12가 같은 거리 → 더 작은 11을 반환해야 함
#
# ✅ GPT가 준 힌트 요약:
# - `key=lambda x: (abs(x - n), x)`로 정렬하면,
#   거리 우선 정렬 + 거리 같을 경우 오름차순 정렬이 동시에 적용됨
#
# ✅ 사용된 개념 요약:
# - lambda 정렬 기준: tuple을 이용한 다중 정렬 우선순위 설정
# - `sort()`는 in-place 정렬로 리스트 자체를 바꿈
# - `min(array, key=...)`로도 구현 가능
#
# ✅ 시간 복잡도:
# - 정렬 O(n log n) + index 접근 O(1)
# - n ≤ 100이므로 매우 빠름
# -----------------------------------------------------
