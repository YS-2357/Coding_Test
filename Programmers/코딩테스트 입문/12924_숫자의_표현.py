# 12924_숫자의_표현.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 자연수 n이 주어졌을 때, n을 연속된 자연수들의 합으로 나타내는 방법의 개수를 구하라.
# - 예: n=15 → 1+2+3+4+5, 4+5+6, 7+8, 15 → 총 4가지.

# ✅ 입력:
# - n (1 ≤ n ≤ 10,000)

# ✅ 출력:
# - 연속된 자연수 합으로 표현 가능한 방법의 개수

# ✅ 예시:
#   입력: 15
#   출력: 4
# -----------------------------------------------------

def solution(n):
    answer = 0  # 연속합으로 표현 가능한 경우의 수를 저장
    sums = 0    # 현재 연속 구간의 합을 저장

    # start는 연속합의 시작 숫자
    for start in range(1, n + 1):
        end = start  # end는 연속합의 끝 숫자, start부터 시작

        # 1) sums < n이면 end를 늘려가며 합을 확장
        # 2) sums가 n 이상이 되거나 end가 n을 넘으면 종료
        while sums < n and end <= n:
            sums += end   # 구간합에 end를 추가
            end += 1      # 다음 숫자로 이동

        # sums가 정확히 n이면 표현 가능하므로 count 증가
        if sums == n:
            answer += 1

        # sums를 0으로 초기화해 다음 start 구간 새로 계산
        sums = 0

    return answer

# -----------------------------------------------------
# ✅ 사용된 개념 요약:
# - 구간합 탐색:
#   - start부터 end까지 합을 더해 n과 비교
# - 이중 루프:
#   - start는 1~n까지, end는 start부터 증가
#   - 시간 복잡도는 최악의 경우 O(n^2)
#   - → n이 10,000일 때 효율성 통과 불가 (비효율적)
# - 개선 방안:
#   - 투 포인터로 누적합 관리하면 O(n)으로 가능
# -----------------------------------------------------

# (투 포인터 방식)
# -----------------------------------------------------
# ✅ 문제 설명:
# - n을 연속된 자연수의 합으로 나타내는 방법의 개수를 구한다.
# - 투 포인터로 O(n) 해결 가능.

def solution(n):
    answer = 0  # 가능한 경우의 수
    start, end = 1, 1  # 투 포인터 (연속합 시작과 끝)
    current_sum = 1    # 현재 구간합 (start~end)

    # end가 n을 넘어가면 더 이상 새로운 구간 없음
    while start <= n and end <= n:
        if current_sum == n:
            # 현재 합이 n이면 경우의 수 추가
            answer += 1
            # 다음 구간 탐색 위해 start 이동
            current_sum -= start
            start += 1
        elif current_sum < n:
            # 합이 부족하면 end 확장
            end += 1
            if end <= n:
                current_sum += end
        else:
            # 합이 초과하면 start 이동
            current_sum -= start
            start += 1

    return answer

# -----------------------------------------------------
# ✅ 핵심 개념 요약:
# - 투 포인터로 start~end 구간합을 관리
# - current_sum == n → count++, start 이동
# - current_sum < n → end 이동
# - current_sum > n → start 이동
# ✅ 시간 복잡도:
# - O(n): start와 end 각각 최대 n번 이동
# -----------------------------------------------------
