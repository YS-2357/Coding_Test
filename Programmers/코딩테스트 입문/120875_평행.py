# 120875_평행.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 4개의 점이 주어질 때, 두 직선이 평행한 경우가 있는지 확인.
# - 평행이면 1, 아니면 0을 반환.
# - 기울기 비교로 평행 여부 판단.

# ✅ 입력 형식:
# - dots: 4개의 2차원 좌표 리스트 (예: [[x1,y1],[x2,y2],[x3,y3],[x4,y4]])
#   - 모든 좌표는 정수이고 서로 다름.
# - 점 개수는 항상 4개 고정.

# ✅ 출력 형식:
# - 1 (평행한 직선 쌍 존재)
# - 0 (평행한 직선 쌍 없음)

# ✅ 입출력 예제:
#   입력: [[1,4],[9,2],[3,8],[11,6]]
#   출력: 1
# -----------------------------------------------------

# ✅ 기울기를 계산하는 함수
def calc_inc(p1, p2):
    x1, y1 = p1   # 첫 번째 점의 좌표 (x1, y1)
    x2, y2 = p2   # 두 번째 점의 좌표 (x2, y2)
    
    # 두 점의 x좌표가 같으면 수직선 → 기울기 무한대 처리
    if x1 == x2:
        return float("inf")
    
    # 기울기 공식: (y2 - y1) / (x2 - x1)
    return (y2 - y1) / (x2 - x1)

def solution(dots):
    answer = 0  # 평행 여부를 나타내는 변수 (기본값: 0)

    # 첫 번째 경우: (0,1) vs (2,3)
    if calc_inc(dots[0], dots[1]) == calc_inc(dots[2], dots[3]):
        return 1  # 평행하면 바로 반환
    
    # 두 번째 경우: (0,2) vs (1,3)
    elif calc_inc(dots[0], dots[2]) == calc_inc(dots[1], dots[3]):
        return 1  # 평행이면 바로 반환
    
    # 세 번째 경우: (0,3) vs (1,2)
    elif calc_inc(dots[0], dots[3]) == calc_inc(dots[1], dots[2]):
        return 1  # 평행이면 바로 반환

    # 세 경우 모두 평행이 아니면 0 반환
    return answer

# -----------------------------------------------------
# ✅ 사용된 개념 요약:
# - 기울기 공식: (y2 - y1) / (x2 - x1)
# - 특수 케이스: x1 == x2 → 기울기 무한대 처리
# - 4개의 점 → 3가지 직선 조합만 비교
#   (0,1)-(2,3), (0,2)-(1,3), (0,3)-(1,2)
# - 시간 복잡도: O(1) (점 개수가 고정)
# -----------------------------------------------------
