# 120853_컨트롤_제트.py
# -----------------------------------------------------
# ✅ 문제 설명:
# - 문자열 s에는 정수와 "Z"가 공백으로 구분되어 나열됨
# - 정수는 더하고, "Z"가 나오면 **바로 직전에 더한 수를 무효화**
# - 최종 합계를 구하라
#
# ✅ 입력:
# - s: 문자열 (예: "1 2 Z 3") — 길이 1~1000
#
# ✅ 출력:
# - Z 처리까지 반영한 최종 합계 (정수)
#
# ✅ 예시:
#   입력: "1 2 Z 3"
#   출력: 4
#   → 1 + 2 → "Z"로 2 취소 → +3 → 결과: 1 + 3 = 4
# -----------------------------------------------------

def solution(s):
    answer = 0  # 최종 결과를 저장할 변수
    s = s.split()  # ✅ 문자열을 공백 기준으로 나눔 → 리스트로 변환
    result = []    # 숫자만 저장할 스택 역할의 리스트

    for char in s:
        if char == 'Z':  # ✅ "Z"일 경우
            result.pop()  # 가장 최근에 더한 숫자를 제거
        else:
            result.append(int(char))  # 숫자는 int로 변환해 저장

    for num in result:  # ✅ 남아 있는 숫자들을 모두 합산
        answer += int(num)

    return answer  # 최종 합 반환

# -----------------------------------------------------
# ✅ 사용된 개념 요약:
# - 스택 기반 사고: "Z"는 가장 최근 숫자를 취소
# - 문자열 split() → 리스트로 변환
# - 숫자 문자열은 int()로 변환 후 누적
#
# ✅ 시간 복잡도:
# - O(n): 문자열 처리와 합산 모두 선형 시간
#
# ✅ 기타:
# - pop()은 "Z"가 항상 유효한 위치에서만 등장한다고 가정 (문제 조건상)
# -----------------------------------------------------

# 다른 풀이
# def solution(s):
#     stack = []
#     for a in s.split():
#         if a != 'Z':
#             stack.append(int(a))
#         else:
#             if stack:
#                 stack.pop()

#     return sum(stack)
