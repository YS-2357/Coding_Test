# 120923_연속된_수의_합.py
# -----------------------------------------------------
# ✅ 문제 설명:
# 정수 num과 total이 주어질 때, 합이 total이 되는 연속된 num개의 정수를 오름차순으로 반환하는 문제.

# ✅ 입력 형식:
# - num: 1 이상 100 이하의 정수 (연속된 수의 개수)
# - total: -1,000,000 이상 1,000,000 이하의 정수 (연속된 수의 합)

# ✅ 출력 형식:
# - 길이가 num인 리스트 (오름차순), 원소들은 연속된 정수이며 합이 total이 되어야 함.

# ✅ 입출력 예제:
# 예제 1:
#   입력: num = 3, total = 12
#   출력: [3, 4, 5]
# 예제 2:
#   입력: num = 4, total = 14
#   출력: [2, 3, 4, 5]

# ✅ 정답 코드:
def solution(num, total):
    # 결과를 저장할 리스트 초기화
    answer = []
    # 연속된 수의 시작값을 계산:
    # 평균(total/num)에서 가운데 값 기준 절반 길이((num-1)/2)를 빼면 시작값이 됨
    a = total / num - (num - 1) / 2
    # a는 항상 정수로 떨어지므로 int로 변환
    a = int(a)
    # 시작값부터 num개 만큼 연속된 수를 추가
    for i in range(num):
        answer.append(a + i)
    # 오름차순 상태로 반환
    return answer

# -----------------------------------------------------
# 🔍 첫 시도 결과:
# - 한 번에 정답 도출 (힌트 사용 안 함)

# 📚 사용된 개념 요약:
# - 등차수열의 합 공식:
#   합 = 항의 개수 × 시작값 + (0부터 n-1까지의 합)
# - 평균값과 시작값 관계:
#   시작값 a = total/num - (num-1)/2
# - 시간복잡도: O(num) (리스트에 num개 원소 추가)
# - 공간복잡도: O(num)
